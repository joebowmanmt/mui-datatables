{"version":3,"file":"index.js","sources":["../src/components/TableBodyCell.js","../src/components/TableBodyRow.js","../src/components/TableSelectCell.js","../src/utils.js","../src/components/TableBody.js","../src/components/TableFilterList.js","../src/components/TableHeadCell.js","../src/components/TableHeadRow.js","../src/components/TableHead.js","../src/components/TablePagination.js","../src/components/TableFooter.js","../src/components/TableResize.js","../src/components/Popover.js","../src/components/TableFilter.js","../src/components/TableViewCol.js","../src/components/TableSearch.js","../src/components/TableToolbar.js","../src/components/TableToolbarSelect.js","../src/textLabels.js","../src/MUIDataTable.js"],"sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst defaultBodyCellStyles = theme => ({\r\n  root: {},\r\n  cellHide: {\r\n    display: 'none',\r\n  },\r\n  stackedCommon: {\r\n    [theme.breakpoints.down('sm')]: {\r\n      display: 'inline-block',\r\n      fontSize: '16px',\r\n      height: '24px',\r\n      whiteSpace: 'nowrap',\r\n      width: 'calc(50% - 80px)',\r\n      whiteSpace: 'nowrap',\r\n      '&:last-child': {\r\n        borderBottom: 'none',\r\n      },\r\n      '&:nth-last-child(2)': {\r\n        borderBottom: 'none',\r\n      },\r\n    },\r\n  },\r\n  cellStackedSmall: {\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: '50%',\r\n    },\r\n  },\r\n  responsiveStackedSmall: {\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: '50%',\r\n    },\r\n  },\r\n});\r\n\r\nclass TableBodyCell extends React.Component {\r\n  handleClick = event => {\r\n    const { colIndex, options, children, dataIndex, rowIndex } = this.props;\r\n    if (options.onCellClick) {\r\n      options.onCellClick(children, { colIndex, rowIndex, dataIndex, event });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      children,\r\n      classes,\r\n      colIndex,\r\n      columnHeader,\r\n      options,\r\n      dataIndex,\r\n      rowIndex,\r\n      className,\r\n      print,\r\n      ...otherProps\r\n    } = this.props;\r\n\r\n    return [\r\n      <TableCell\r\n        key={1}\r\n        className={classNames(\r\n          {\r\n            [classes.root]: true,\r\n            [classes.cellHide]: true,\r\n            [classes.stackedCommon]: options.responsive === 'stacked' || options.responsive === 'stackedFullWidth',\r\n            [classes.cellStackedSmall]:\r\n              options.responsive === 'stacked' ||\r\n              (options.responsive === 'stackedFullWidth' &&\r\n                (options.setTableProps().padding === 'none' || options.setTableProps().size === 'small')),\r\n            'datatables-noprint': !print,\r\n          },\r\n          className,\r\n        )}>\r\n        {columnHeader}\r\n      </TableCell>,\r\n      <TableCell\r\n        key={2}\r\n        onClick={this.handleClick}\r\n        className={classNames(\r\n          {\r\n            [classes.root]: true,\r\n            [classes.stackedCommon]: options.responsive === 'stacked' || options.responsive === 'stackedFullWidth',\r\n            [classes.responsiveStackedSmall]:\r\n              options.responsive === 'stacked' ||\r\n              (options.responsive === 'stackedFullWidth' &&\r\n                (options.setTableProps().padding === 'none' || options.setTableProps().size === 'small')),\r\n            'datatables-noprint': !print,\r\n          },\r\n          className,\r\n        )}\r\n        {...otherProps}>\r\n        {children}\r\n      </TableCell>,\r\n    ];\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultBodyCellStyles, { name: 'MUIDataTableBodyCell' })(TableBodyCell);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst defaultBodyRowStyles = theme => ({\r\n  root: {},\r\n  hover: {},\r\n  hoverCursor: { cursor: 'pointer' },\r\n  responsiveStacked: {\r\n    [theme.breakpoints.down('sm')]: {\r\n      border: 'solid 2px rgba(0, 0, 0, 0.15)',\r\n    },\r\n  },\r\n});\r\n\r\nclass TableBodyRow extends React.Component {\r\n  static propTypes = {\r\n    /** Options used to describe table */\r\n    options: PropTypes.object.isRequired,\r\n    /** Callback to execute when row is clicked */\r\n    onClick: PropTypes.func,\r\n    /** Current row selected or not */\r\n    rowSelected: PropTypes.bool,\r\n    /** Extend the style applied to components */\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  render() {\r\n    const { classes, options, rowSelected, onClick, className, ...rest } = this.props;\r\n\r\n    return (\r\n      <TableRow\r\n        hover={options.rowHover ? true : false}\r\n        onClick={onClick}\r\n        className={classNames(\r\n          {\r\n            [classes.root]: true,\r\n            [classes.hover]: options.rowHover,\r\n            [classes.hoverCursor]: options.selectableRowsOnClick || options.expandableRowsOnClick,\r\n            [classes.responsiveStacked]: options.responsive === 'stacked' || options.responsive === 'stackedFullWidth',\r\n          },\r\n          className,\r\n        )}\r\n        selected={rowSelected}\r\n        {...rest}>\r\n        {this.props.children}\r\n      </TableRow>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultBodyRowStyles, { name: 'MUIDataTableBodyRow' })(TableBodyRow);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\n\r\nconst defaultSelectCellStyles = theme => ({\r\n  root: {},\r\n  fixedHeader: {\r\n    position: 'sticky',\r\n    top: '0px',\r\n    left: '0px',\r\n    zIndex: 100,\r\n  },\r\n  fixedHeaderCommon: {\r\n    position: 'sticky',\r\n    zIndex: 100,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  fixedHeaderXAxis: {\r\n    left: '0px',\r\n  },\r\n  fixedHeaderYAxis: {\r\n    top: '0px',\r\n  },\r\n  icon: {\r\n    cursor: 'pointer',\r\n    transition: 'transform 0.25s',\r\n  },\r\n  expanded: {\r\n    transform: 'rotate(90deg)',\r\n  },\r\n  hide: {\r\n    visibility: 'hidden',\r\n  },\r\n  headerCell: {\r\n    zIndex: 110,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  expandDisabled: {},\r\n  checkboxRoot: {},\r\n  checked: {},\r\n  disabled: {},\r\n});\r\n\r\nclass TableSelectCell extends React.Component {\r\n  static propTypes = {\r\n    /** Select cell checked on/off */\r\n    checked: PropTypes.bool.isRequired,\r\n    /** Select cell part of fixed header */\r\n    fixedHeader: PropTypes.bool,\r\n    /** Select cell part of fixed header */\r\n    fixedHeaderOptions: PropTypes.shape({\r\n      xAxis: PropTypes.bool,\r\n      yAxis: PropTypes.bool,\r\n    }),\r\n    /** Callback to trigger cell update */\r\n    onChange: PropTypes.func,\r\n    /** Extend the style applied to components */\r\n    classes: PropTypes.object,\r\n    /** Is expandable option enabled */\r\n    expandableOn: PropTypes.bool,\r\n    /** Adds extra class, `expandDisabled` when the row is not expandable. */\r\n    hideExpandButton: PropTypes.bool,\r\n    /** Is selectable option enabled */\r\n    selectableOn: PropTypes.string,\r\n    /** Select cell disabled on/off */\r\n  };\r\n\r\n  static defaultProps = {\r\n    isHeaderCell: false,\r\n    isRowExpanded: false,\r\n    expandableOn: false,\r\n    selectableOn: 'none',\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      classes,\r\n      fixedHeader,\r\n      fixedHeaderOptions,\r\n      isHeaderCell,\r\n      expandableOn,\r\n      selectableOn,\r\n      isRowExpanded,\r\n      onExpand,\r\n      isRowSelectable,\r\n      selectableRowsHeader,\r\n      hideExpandButton,\r\n      ...otherProps\r\n    } = this.props;\r\n    let fixedHeaderClasses;\r\n\r\n    if (!expandableOn && selectableOn === 'none') return false;\r\n\r\n    // DEPRECATED, make sure to replace defaults with new options when removing\r\n    if (fixedHeader) fixedHeaderClasses = classes.fixedHeader;\r\n\r\n    if (fixedHeaderOptions) {\r\n      fixedHeaderClasses = classes.fixedHeaderCommon;\r\n      if (fixedHeaderOptions.xAxis) fixedHeaderClasses += ` ${classes.fixedHeaderXAxis}`;\r\n      if (fixedHeaderOptions.yAxis) fixedHeaderClasses += ` ${classes.fixedHeaderYAxis}`;\r\n    }\r\n\r\n    const cellClass = classNames({\r\n      [classes.root]: true,\r\n      [fixedHeaderClasses]: true,\r\n      [classes.headerCell]: isHeaderCell,\r\n    });\r\n\r\n    const buttonClass = classNames({\r\n      [classes.expandDisabled]: hideExpandButton,\r\n    });\r\n\r\n    const iconClass = classNames({\r\n      [classes.icon]: true,\r\n      [classes.hide]: isHeaderCell,\r\n      [classes.expanded]: isRowExpanded,\r\n    });\r\n\r\n    const renderCheckBox = () => {\r\n      if (isHeaderCell && (selectableOn !== 'multiple' || selectableRowsHeader === false)) {\r\n        // only display the header checkbox for multiple selection.\r\n        return null;\r\n      }\r\n      return (\r\n        <Checkbox\r\n          classes={{\r\n            root: classes.checkboxRoot,\r\n            checked: classes.checked,\r\n            disabled: classes.disabled,\r\n          }}\r\n          color=\"primary\"\r\n          disabled={!isRowSelectable}\r\n          {...otherProps}\r\n        />\r\n      );\r\n    };\r\n\r\n    return (\r\n      <TableCell className={cellClass} padding=\"checkbox\">\r\n        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n          {expandableOn && (\r\n            <IconButton onClick={onExpand} disabled={isHeaderCell} className={buttonClass}>\r\n              <KeyboardArrowRight id=\"expandable-button\" className={iconClass} />\r\n            </IconButton>\r\n          )}\r\n          {selectableOn !== 'none' && renderCheckBox()}\r\n        </div>\r\n      </TableCell>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultSelectCellStyles, { name: 'MUIDataTableSelectCell' })(TableSelectCell);\r\n","function buildMap(rows) {\r\n  return rows.reduce((accum, { dataIndex }) => {\r\n    accum[dataIndex] = true;\r\n    return accum;\r\n  }, {});\r\n}\r\n\r\nfunction escapeDangerousCSVCharacters(data) {\r\n  if (typeof data === 'string') {\r\n    // Places single quote before the appearance of dangerous characters if they\r\n    // are the first in the data string.\r\n    return data.replace(/^\\+|^\\-|^\\=|^\\@/g, \"'$&\");\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nfunction warnDeprecated(warning) {\r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.error(`Deprecation Notice:  ${warning}`);\r\n  }\r\n}\r\n\r\nfunction getPageValue(count, rowsPerPage, page) {\r\n  const totalPages = count <= rowsPerPage ? 1 : Math.ceil(count / rowsPerPage);\r\n\r\n  // `page` is 0-indexed\r\n  return page >= totalPages ? totalPages - 1 : page;\r\n}\r\n\r\nfunction getCollatorComparator() {\r\n  if (!!Intl) {\r\n    const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\r\n    return collator.compare;\r\n  }\r\n\r\n  const fallbackComparator = (a, b) => a.localeCompare(b);\r\n  return fallbackComparator;\r\n}\r\n\r\nfunction sortCompare(order) {\r\n  return (a, b) => {\r\n    var aData = a.data === null || typeof a.data === 'undefined' ? '' : a.data;\r\n    var bData = b.data === null || typeof b.data === 'undefined' ? '' : b.data;\r\n    return (\r\n      (typeof aData.localeCompare === 'function' ? aData.localeCompare(bData) : aData - bData) *\r\n      (order === 'asc' ? 1 : -1)\r\n    );\r\n  };\r\n}\r\n\r\nfunction buildCSV(columns, data, options) {\r\n  const replaceDoubleQuoteInString = columnData =>\r\n    typeof columnData === 'string' ? columnData.replace(/\\\"/g, '\"\"') : columnData;\r\n\r\n  const buildHead = columns => {\r\n    return (\r\n      columns\r\n        .reduce(\r\n          (soFar, column) =>\r\n            column.download\r\n              ? soFar +\r\n                '\"' +\r\n                escapeDangerousCSVCharacters(replaceDoubleQuoteInString(column.label || column.name)) +\r\n                '\"' +\r\n                options.downloadOptions.separator\r\n              : soFar,\r\n          '',\r\n        )\r\n        .slice(0, -1) + '\\r\\n'\r\n    );\r\n  };\r\n  const CSVHead = buildHead(columns);\r\n\r\n  const buildBody = data => {\r\n    if (!data.length) return '';\r\n    return data\r\n      .reduce(\r\n        (soFar, row) =>\r\n          soFar +\r\n          '\"' +\r\n          row.data\r\n            .filter((_, index) => columns[index].download)\r\n            .map(columnData => escapeDangerousCSVCharacters(replaceDoubleQuoteInString(columnData)))\r\n            .join('\"' + options.downloadOptions.separator + '\"') +\r\n          '\"\\r\\n',\r\n        '',\r\n      )\r\n      .trim();\r\n  };\r\n  const CSVBody = buildBody(data);\r\n\r\n  const csv = options.onDownload\r\n    ? options.onDownload(buildHead, buildBody, columns, data)\r\n    : `${CSVHead}${CSVBody}`.trim();\r\n\r\n  return csv;\r\n}\r\n\r\nfunction downloadCSV(csv, filename) {\r\n  const blob = new Blob([csv], { type: 'text/csv' });\r\n\r\n  /* taken from react-csv */\r\n  if (navigator && navigator.msSaveOrOpenBlob) {\r\n    navigator.msSaveOrOpenBlob(blob, filename);\r\n  } else {\r\n    const dataURI = `data:text/csv;charset=utf-8,${csv}`;\r\n\r\n    const URL = window.URL || window.webkitURL;\r\n    const downloadURI = typeof URL.createObjectURL === 'undefined' ? dataURI : URL.createObjectURL(blob);\r\n\r\n    let link = document.createElement('a');\r\n    link.setAttribute('href', downloadURI);\r\n    link.setAttribute('download', filename);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  }\r\n}\r\n\r\nfunction createCSVDownload(columns, data, options, downloadCSV) {\r\n  const csv = buildCSV(columns, data, options);\r\n\r\n  if (options.onDownload && csv === false) {\r\n    return;\r\n  }\r\n\r\n  downloadCSV(csv, options.downloadOptions.filename);\r\n}\r\n\r\nexport {\r\n  buildMap,\r\n  getPageValue,\r\n  getCollatorComparator,\r\n  sortCompare,\r\n  createCSVDownload,\r\n  buildCSV,\r\n  downloadCSV,\r\n  warnDeprecated,\r\n  escapeDangerousCSVCharacters,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MuiTableBody from '@material-ui/core/TableBody';\r\nimport TableBodyCell from './TableBodyCell';\r\nimport TableBodyRow from './TableBodyRow';\r\nimport TableSelectCell from './TableSelectCell';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport { getPageValue, warnDeprecated } from '../utils';\r\n\r\nconst defaultBodyStyles = {\r\n  root: {},\r\n  emptyTitle: {\r\n    textAlign: 'center',\r\n  },\r\n};\r\n\r\nclass TableBody extends React.Component {\r\n  static propTypes = {\r\n    /** Data used to describe table */\r\n    data: PropTypes.array.isRequired,\r\n    /** Total number of data rows */\r\n    count: PropTypes.number.isRequired,\r\n    /** Columns used to describe table */\r\n    columns: PropTypes.array.isRequired,\r\n    /** Options used to describe table */\r\n    options: PropTypes.object.isRequired,\r\n    /** Data used to filter table against */\r\n    filterList: PropTypes.array,\r\n    /** Callback to execute when row is clicked */\r\n    onRowClick: PropTypes.func,\r\n    /** Table rows expanded */\r\n    expandedRows: PropTypes.object,\r\n    /** Table rows selected */\r\n    selectedRows: PropTypes.object,\r\n    /** Callback to trigger table row select */\r\n    selectRowUpdate: PropTypes.func,\r\n    /** The most recent row to have been selected/unselected */\r\n    previousSelectedRow: PropTypes.object,\r\n    /** Data used to search table against */\r\n    searchText: PropTypes.string,\r\n    /** Toggle row expandable */\r\n    toggleExpandRow: PropTypes.func,\r\n    /** Extend the style applied to components */\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  static defaultProps = {\r\n    toggleExpandRow: () => {},\r\n  };\r\n\r\n  buildRows() {\r\n    const { data, page, rowsPerPage, count } = this.props;\r\n\r\n    if (this.props.options.serverSide) return data.length ? data : null;\r\n\r\n    let rows = [];\r\n    const highestPageInRange = getPageValue(count, rowsPerPage, page);\r\n    const fromIndex = highestPageInRange === 0 ? 0 : highestPageInRange * rowsPerPage;\r\n    const toIndex = Math.min(count, (highestPageInRange + 1) * rowsPerPage);\r\n\r\n    if (page > highestPageInRange) {\r\n      console.warn('Current page is out of range, using the highest page that is in range instead.');\r\n    }\r\n\r\n    for (let rowIndex = fromIndex; rowIndex < count && rowIndex < toIndex; rowIndex++) {\r\n      if (data[rowIndex] !== undefined) rows.push(data[rowIndex]);\r\n    }\r\n\r\n    return rows.length ? rows : null;\r\n  }\r\n\r\n  getRowIndex(index) {\r\n    const { page, rowsPerPage, options } = this.props;\r\n\r\n    if (options.serverSide) {\r\n      return index;\r\n    }\r\n\r\n    const startIndex = page === 0 ? 0 : page * rowsPerPage;\r\n    return startIndex + index;\r\n  }\r\n\r\n  isRowSelected(dataIndex) {\r\n    const { selectedRows } = this.props;\r\n    return selectedRows.lookup && selectedRows.lookup[dataIndex] ? true : false;\r\n  }\r\n\r\n  isRowExpanded(dataIndex) {\r\n    const { expandedRows } = this.props;\r\n    return expandedRows.lookup && expandedRows.lookup[dataIndex] ? true : false;\r\n  }\r\n\r\n  isRowSelectable(dataIndex, selectedRows) {\r\n    const { options } = this.props;\r\n    selectedRows = selectedRows || this.props.selectedRows;\r\n\r\n    if (options.isRowSelectable) {\r\n      return options.isRowSelectable(dataIndex, selectedRows);\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  isRowExpandable(dataIndex) {\r\n    const { options, expandedRows } = this.props;\r\n    if (options.isRowExpandable) {\r\n      return options.isRowExpandable(dataIndex, expandedRows);\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  handleRowSelect = (data, event) => {\r\n    let shiftKey = event && event.nativeEvent ? event.nativeEvent.shiftKey : false;\r\n    let shiftAdjacentRows = [];\r\n    let previousSelectedRow = this.props.previousSelectedRow;\r\n\r\n    // If the user is pressing shift and has previously clicked another row.\r\n    if (shiftKey && previousSelectedRow && previousSelectedRow.index < this.props.data.length) {\r\n      let curIndex = previousSelectedRow.index;\r\n\r\n      // Create a copy of the selectedRows object. This will be used and modified\r\n      // below when we see if we can add adjacent rows.\r\n      let selectedRows = cloneDeep(this.props.selectedRows);\r\n\r\n      // Add the clicked on row to our copy of selectedRows (if it isn't already present).\r\n      let clickedDataIndex = this.props.data[data.index].dataIndex;\r\n      if (selectedRows.data.filter(d => d.dataIndex === clickedDataIndex).length === 0) {\r\n        selectedRows.data.push({\r\n          index: data.index,\r\n          dataIndex: clickedDataIndex,\r\n        });\r\n        selectedRows.lookup[clickedDataIndex] = true;\r\n      }\r\n\r\n      while (curIndex !== data.index) {\r\n        let dataIndex = this.props.data[curIndex].dataIndex;\r\n\r\n        if (this.isRowSelectable(dataIndex, selectedRows)) {\r\n          let lookup = {\r\n            index: curIndex,\r\n            dataIndex: dataIndex,\r\n          };\r\n\r\n          // Add adjacent row to temp selectedRow object if it isn't present.\r\n          if (selectedRows.data.filter(d => d.dataIndex === dataIndex).length === 0) {\r\n            selectedRows.data.push(lookup);\r\n            selectedRows.lookup[dataIndex] = true;\r\n          }\r\n\r\n          shiftAdjacentRows.push(lookup);\r\n        }\r\n        curIndex = data.index > curIndex ? curIndex + 1 : curIndex - 1;\r\n      }\r\n    }\r\n    this.props.selectRowUpdate('cell', data, shiftAdjacentRows);\r\n  };\r\n\r\n  handleRowClick = (row, data, event) => {\r\n    // Don't trigger onRowClick if the event was actually the expandable icon.\r\n    if (\r\n      event.target.id === 'expandable-button' ||\r\n      (event.target.nodeName === 'path' && event.target.parentNode.id === 'expandable-button')\r\n    ) {\r\n      // In a future release, onRowClick will no longer be called here (for consistency).\r\n      // For now, issue a deprecated warning.\r\n      if (this.props.options.onRowClick) {\r\n        warnDeprecated(\r\n          'Clicks on expandable button will not trigger onRowClick in an upcoming release, see: https://github.com/gregnb/mui-datatables/issues/516.',\r\n        );\r\n        this.props.options.onRowClick(row, data, event);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Don't trigger onRowClick if the event was actually a row selection via checkbox\r\n    if (event.target.id && event.target.id.startsWith('MUIDataTableSelectCell')) return;\r\n\r\n    // Check if we should toggle row select when row is clicked anywhere\r\n    if (\r\n      this.props.options.selectableRowsOnClick &&\r\n      this.props.options.selectableRows !== 'none' &&\r\n      this.isRowSelectable(data.dataIndex, this.props.selectedRows)\r\n    ) {\r\n      const selectRow = { index: data.rowIndex, dataIndex: data.dataIndex };\r\n      this.handleRowSelect(selectRow, event);\r\n    }\r\n    // Check if we should trigger row expand when row is clicked anywhere\r\n    if (\r\n      this.props.options.expandableRowsOnClick &&\r\n      this.props.options.expandableRows &&\r\n      this.isRowExpandable(data.dataIndex, this.props.expandedRows)\r\n    ) {\r\n      const expandRow = { index: data.rowIndex, dataIndex: data.dataIndex };\r\n      this.props.toggleExpandRow(expandRow);\r\n    }\r\n\r\n    // Don't trigger onRowClick if the event was actually a row selection via click\r\n    if (this.props.options.selectableRowsOnClick) return;\r\n\r\n    this.props.options.onRowClick && this.props.options.onRowClick(row, data, event);\r\n  };\r\n\r\n  render() {\r\n    const { classes, columns, toggleExpandRow, options } = this.props;\r\n    const tableRows = this.buildRows();\r\n    const visibleColCnt = columns.filter(c => c.display === 'true').length;\r\n\r\n    return (\r\n      <MuiTableBody>\r\n        {tableRows && tableRows.length > 0 ? (\r\n          tableRows.map((data, rowIndex) => {\r\n            const { data: row, dataIndex } = data;\r\n\r\n            if (options.customRowRender) {\r\n              return options.customRowRender(row, dataIndex, rowIndex);\r\n            }\r\n\r\n            return (\r\n              <React.Fragment key={rowIndex}>\r\n                <TableBodyRow\r\n                  {...(options.setRowProps ? options.setRowProps(row, dataIndex) : {})}\r\n                  options={options}\r\n                  rowSelected={options.selectableRows !== 'none' ? this.isRowSelected(dataIndex) : false}\r\n                  onClick={this.handleRowClick.bind(null, row, { rowIndex, dataIndex })}\r\n                  data-testid={'MUIDataTableBodyRow-' + dataIndex}\r\n                  id={'MUIDataTableBodyRow-' + dataIndex}>\r\n                  <TableSelectCell\r\n                    onChange={this.handleRowSelect.bind(null, {\r\n                      index: this.getRowIndex(rowIndex),\r\n                      dataIndex: dataIndex,\r\n                    })}\r\n                    onExpand={toggleExpandRow.bind(null, {\r\n                      index: this.getRowIndex(rowIndex),\r\n                      dataIndex: dataIndex,\r\n                    })}\r\n                    fixedHeader={options.fixedHeader}\r\n                    fixedHeaderOptions={options.fixedHeaderOptions}\r\n                    checked={this.isRowSelected(dataIndex)}\r\n                    expandableOn={options.expandableRows}\r\n                    // When rows are expandable, but this particular row isn't expandable, set this to true.\r\n                    // This will add a new class to the toggle button, MUIDataTableSelectCell-expandDisabled.\r\n                    hideExpandButton={!this.isRowExpandable(dataIndex) && options.expandableRows}\r\n                    selectableOn={options.selectableRows}\r\n                    isRowExpanded={this.isRowExpanded(dataIndex)}\r\n                    isRowSelectable={this.isRowSelectable(dataIndex)}\r\n                    id={'MUIDataTableSelectCell-' + dataIndex}\r\n                  />\r\n                  {row.map(\r\n                    (column, columnIndex) =>\r\n                      columns[columnIndex].display === 'true' && (\r\n                        <TableBodyCell\r\n                          {...(columns[columnIndex].setCellProps\r\n                            ? columns[columnIndex].setCellProps(column, dataIndex, columnIndex)\r\n                            : {})}\r\n                          data-testid={`MuiDataTableBodyCell-${columnIndex}-${rowIndex}`}\r\n                          dataIndex={dataIndex}\r\n                          rowIndex={rowIndex}\r\n                          colIndex={columnIndex}\r\n                          columnHeader={columns[columnIndex].label}\r\n                          print={columns[columnIndex].print}\r\n                          options={options}\r\n                          key={columnIndex}>\r\n                          {column}\r\n                        </TableBodyCell>\r\n                      ),\r\n                  )}\r\n                </TableBodyRow>\r\n                {this.isRowExpanded(dataIndex) && options.renderExpandableRow(row, { rowIndex, dataIndex })}\r\n              </React.Fragment>\r\n            );\r\n          })\r\n        ) : (\r\n          <TableBodyRow options={options}>\r\n            <TableBodyCell\r\n              colSpan={options.selectableRows !== 'none' || options.expandableRows ? visibleColCnt + 1 : visibleColCnt}\r\n              options={options}\r\n              colIndex={0}\r\n              rowIndex={0}>\r\n              <Typography variant=\"subtitle1\" className={classes.emptyTitle}>\r\n                {options.textLabels.body.noMatch}\r\n              </Typography>\r\n            </TableBodyCell>\r\n          </TableBodyRow>\r\n        )}\r\n      </MuiTableBody>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultBodyStyles, { name: 'MUIDataTableBody' })(TableBody);\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst defaultFilterListStyles = {\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: 'left',\r\n    flexWrap: 'wrap',\r\n    margin: '0px 16px 0px 16px',\r\n  },\r\n  chip: {\r\n    margin: '8px 8px 0px 0px',\r\n  },\r\n};\r\n\r\nclass TableFilterList extends React.Component {\r\n  static propTypes = {\r\n    /** Data used to filter table against */\r\n    filterList: PropTypes.array.isRequired,\r\n    /** Filter List value renderers */\r\n    filterListRenderers: PropTypes.array.isRequired,\r\n    /** Columns used to describe table */\r\n    columnNames: PropTypes.PropTypes.arrayOf(\r\n      PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.shape({ name: PropTypes.string.isRequired, filterType: PropTypes.string }),\r\n      ]),\r\n    ).isRequired,\r\n    /** Callback to trigger filter update */\r\n    onFilterUpdate: PropTypes.func,\r\n    /** Extend the style applied to components */\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      classes,\r\n      filterList,\r\n      filterUpdate,\r\n      filterListRenderers,\r\n      columnNames,\r\n      serverSideFilterList,\r\n      customFilterListUpdate,\r\n    } = this.props;\r\n    const { serverSide } = this.props.options;\r\n\r\n    const customFilterChip = (customFilterItem, index, customFilterItemIndex, item, isArray) => {\r\n      let type;\r\n\r\n      // If our custom filter list is an array, we need to check for custom update functions to determine\r\n      // default type. Otherwise we use the supplied type in options.\r\n      if (isArray) type = customFilterListUpdate[index] ? 'custom' : 'chip';\r\n      else type = columnNames[index].filterType;\r\n\r\n      return (\r\n        <Chip\r\n          label={customFilterItem}\r\n          key={customFilterItemIndex}\r\n          onDelete={filterUpdate.bind(\r\n            null,\r\n            index,\r\n            item[customFilterItemIndex] || [],\r\n            columnNames[index].name,\r\n            type,\r\n            customFilterListUpdate[index],\r\n          )}\r\n          className={classes.chip}\r\n        />\r\n      );\r\n    };\r\n\r\n    const filterChip = (index, data, colIndex) => (\r\n      <Chip\r\n        label={filterListRenderers[index](data)}\r\n        key={colIndex}\r\n        onDelete={filterUpdate.bind(null, index, data, columnNames[index].name, 'chip')}\r\n        className={classes.chip}\r\n      />\r\n    );\r\n\r\n    const getFilterList = filterList => {\r\n      return filterList.map((item, index) => {\r\n        if (columnNames[index].filterType === 'custom' && filterList[index].length) {\r\n          const filterListRenderersValue = filterListRenderers[index](item);\r\n\r\n          if (filterListRenderersValue) {\r\n            if (Array.isArray(filterListRenderersValue)) {\r\n              return filterListRenderersValue.map((customFilterItem, customFilterItemIndex) =>\r\n                customFilterChip(customFilterItem, index, customFilterItemIndex, item, true),\r\n              );\r\n            } else {\r\n              return customFilterChip(filterListRenderersValue, index, index, item, false);\r\n            }\r\n          }\r\n        }\r\n\r\n        return item.map((data, colIndex) => filterChip(index, data, colIndex));\r\n      });\r\n    };\r\n\r\n    return (\r\n      <div className={classes.root}>{serverSide ? getFilterList(serverSideFilterList) : getFilterList(filterList)}</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultFilterListStyles, { name: 'MUIDataTableFilterList' })(TableFilterList);\r\n","import { withStyles } from '@material-ui/core/styles';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst defaultHeadCellStyles = theme => ({\r\n  root: {},\r\n  fixedHeader: {\r\n    position: 'sticky',\r\n    top: '0px',\r\n    left: '0px',\r\n    zIndex: 100,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  fixedHeaderCommon: {\r\n    position: 'sticky',\r\n    zIndex: 100,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  fixedHeaderXAxis: {\r\n    left: '0px',\r\n  },\r\n  fixedHeaderYAxis: {\r\n    top: '0px',\r\n  },\r\n  tooltip: {\r\n    cursor: 'pointer',\r\n  },\r\n  mypopper: {\r\n    '&[data-x-out-of-boundaries]': {\r\n      display: 'none',\r\n    },\r\n  },\r\n  data: {\r\n    display: 'inline-block',\r\n  },\r\n  sortAction: {\r\n    display: 'flex',\r\n    verticalAlign: 'top',\r\n    cursor: 'pointer',\r\n  },\r\n  sortLabelRoot: {\r\n    height: '10px',\r\n  },\r\n  sortActive: {\r\n    color: theme.palette.text.primary,\r\n  },\r\n  toolButton: {\r\n    display: 'flex',\r\n    outline: 'none',\r\n    cursor: 'pointer',\r\n  },\r\n  hintIconAlone: {\r\n    marginTop: '-3px',\r\n    marginLeft: '3px',\r\n  },\r\n  hintIconWithSortIcon: {\r\n    marginTop: '-3px',\r\n  },\r\n});\r\n\r\nclass TableHeadCell extends React.Component {\r\n  static propTypes = {\r\n    /** Extend the style applied to components */\r\n    classes: PropTypes.object,\r\n    /** Options used to describe table */\r\n    options: PropTypes.object.isRequired,\r\n    /** Current sort direction */\r\n    sortDirection: PropTypes.oneOf(['asc', 'desc', 'none']),\r\n    /** Callback to trigger column sort */\r\n    toggleSort: PropTypes.func.isRequired,\r\n    /** Sort enabled / disabled for this column **/\r\n    sort: PropTypes.bool.isRequired,\r\n    /** Hint tooltip text */\r\n    hint: PropTypes.string,\r\n    /** Column displayed in print */\r\n    print: PropTypes.bool.isRequired,\r\n    /** Optional to be used with `textLabels.body.columnHeaderTooltip` */\r\n    column: PropTypes.object,\r\n  };\r\n\r\n  handleKeyboardSortinput = e => {\r\n    if (e.key === 'Enter') {\r\n      this.props.toggleSort(this.props.index);\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  handleSortClick = () => {\r\n    this.props.toggleSort(this.props.index);\r\n  };\r\n\r\n  render() {\r\n    const { children, classes, options, sortDirection, sort, hint, print, column, cellHeaderProps = {} } = this.props;\r\n    const { className, ...otherProps } = cellHeaderProps;\r\n\r\n    const sortActive = sortDirection !== 'none' && sortDirection !== undefined ? true : false;\r\n    const ariaSortDirection = sortDirection === 'none' ? false : sortDirection;\r\n    let fixedHeaderClasses;\r\n\r\n    const sortLabelProps = {\r\n      classes: { root: classes.sortLabelRoot },\r\n      active: sortActive,\r\n      hideSortIcon: true,\r\n      ...(ariaSortDirection ? { direction: sortDirection } : {}),\r\n    };\r\n\r\n    // DEPRECATED, make sure to replace defaults with new options when removing\r\n    if (options.fixedHeader) fixedHeaderClasses = classes.fixedHeader;\r\n\r\n    if (options.fixedHeaderOptions) {\r\n      fixedHeaderClasses = classes.fixedHeaderCommon;\r\n      if (options.fixedHeaderOptions.xAxis) fixedHeaderClasses += ` ${classes.fixedHeaderXAxis}`;\r\n      if (options.fixedHeaderOptions.yAxis) fixedHeaderClasses += ` ${classes.fixedHeaderYAxis}`;\r\n    }\r\n\r\n    const cellClass = classNames({\r\n      [classes.root]: true,\r\n      [fixedHeaderClasses]: true,\r\n      'datatables-noprint': !print,\r\n      [className]: className,\r\n    });\r\n\r\n    return (\r\n      <TableCell className={cellClass} scope={'col'} sortDirection={ariaSortDirection} {...otherProps}>\r\n        {options.sort && sort ? (\r\n          <span\r\n            role=\"button\"\r\n            onKeyUp={this.handleKeyboardSortinput}\r\n            onClick={this.handleSortClick}\r\n            className={classes.toolButton}\r\n            tabIndex={0}>\r\n            <Tooltip\r\n              title={\r\n                options.textLabels.body.columnHeaderTooltip\r\n                  ? options.textLabels.body.columnHeaderTooltip(column)\r\n                  : options.textLabels.body.toolTip\r\n              }\r\n              placement={'bottom-start'}\r\n              classes={{\r\n                tooltip: classes.tooltip,\r\n                popper: classes.mypopper,\r\n              }}>\r\n              <div className={classes.sortAction}>\r\n                <div\r\n                  className={classNames({\r\n                    [classes.data]: true,\r\n                    [classes.sortActive]: sortActive,\r\n                  })}>\r\n                  {children}\r\n                </div>\r\n                <div className={classes.sortAction}>\r\n                  <TableSortLabel {...sortLabelProps} />\r\n                </div>\r\n              </div>\r\n            </Tooltip>\r\n            {hint && (\r\n              <Tooltip title={hint}>\r\n                <HelpIcon\r\n                  className={!sortActive ? classes.hintIconAlone : classes.hintIconWithSortIcon}\r\n                  fontSize=\"small\"\r\n                />\r\n              </Tooltip>\r\n            )}\r\n          </span>\r\n        ) : (\r\n          <div className={hint ? classes.sortAction : null}>\r\n            {children}\r\n            {hint && (\r\n              <Tooltip\r\n                title={hint}\r\n                placement={'bottom-end'}\r\n                classes={{\r\n                  tooltip: classes.tooltip,\r\n                  popper: classes.mypopper,\r\n                }}\r\n                enterDelay={300}>\r\n                <HelpIcon className={classes.hintIconAlone} fontSize=\"small\" />\r\n              </Tooltip>\r\n            )}\r\n          </div>\r\n        )}\r\n      </TableCell>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultHeadCellStyles, { name: 'MUIDataTableHeadCell' })(TableHeadCell);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst defaultHeadRowStyles = {\r\n  root: {},\r\n};\r\n\r\nclass TableHeadRow extends React.Component {\r\n  static propTypes = {\r\n    /** Extend the style applied to components */\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <TableRow\r\n        className={classNames({\r\n          [classes.root]: true,\r\n        })}>\r\n        {this.props.children}\r\n      </TableRow>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultHeadRowStyles, { name: 'MUIDataTableHeadRow' })(TableHeadRow);\r\n","import { withStyles } from '@material-ui/core/styles';\r\nimport MuiTableHead from '@material-ui/core/TableHead';\r\nimport classNames from 'classnames';\r\nimport React from 'react';\r\nimport { findDOMNode } from 'react-dom';\r\nimport TableHeadCell from './TableHeadCell';\r\nimport TableHeadRow from './TableHeadRow';\r\nimport TableSelectCell from './TableSelectCell';\r\n\r\nconst defaultHeadStyles = theme => ({\r\n  main: {},\r\n  responsiveStacked: {\r\n    [theme.breakpoints.down('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n});\r\n\r\nclass TableHead extends React.Component {\r\n  componentDidMount() {\r\n    this.props.handleHeadUpdateRef(this.handleUpdateCheck);\r\n  }\r\n\r\n  handleToggleColumn = index => {\r\n    this.props.toggleSort(index);\r\n  };\r\n\r\n  handleRowSelect = () => {\r\n    this.props.selectRowUpdate('head', null);\r\n  };\r\n\r\n  render() {\r\n    const { classes, columns, count, options, data, setCellRef, selectedRows } = this.props;\r\n\r\n    const numSelected = (selectedRows && selectedRows.data.length) || 0;\r\n    let isIndeterminate = numSelected > 0 && numSelected < count;\r\n    let isChecked = numSelected === count ? true : false;\r\n\r\n    // When the disableToolbarSelect option is true, there can be\r\n    // selected items that aren't visible, so we need to be more\r\n    // precise when determining if the head checkbox should be checked.\r\n    if (options.disableToolbarSelect === true) {\r\n      if (isChecked) {\r\n        for (let ii = 0; ii < data.length; ii++) {\r\n          if (!selectedRows.lookup[data[ii].dataIndex]) {\r\n            isChecked = false;\r\n            isIndeterminate = true;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        if (numSelected > count) {\r\n          isIndeterminate = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <MuiTableHead\r\n        className={classNames({\r\n          [classes.responsiveStacked]: options.responsive === 'stacked' || options.responsive === 'stackedFullWidth',\r\n          [classes.main]: true,\r\n        })}>\r\n        <TableHeadRow>\r\n          <TableSelectCell\r\n            ref={el => setCellRef(0, findDOMNode(el))}\r\n            onChange={this.handleRowSelect.bind(null)}\r\n            indeterminate={isIndeterminate}\r\n            checked={isChecked}\r\n            isHeaderCell={true}\r\n            expandableOn={options.expandableRows}\r\n            selectableOn={options.selectableRows}\r\n            fixedHeader={options.fixedHeader}\r\n            fixedHeaderOptions={options.fixedHeaderOptions}\r\n            selectableRowsHeader={options.selectableRowsHeader}\r\n            isRowSelectable={true}\r\n          />\r\n          {columns.map(\r\n            (column, index) =>\r\n              column.display === 'true' &&\r\n              (column.customHeadRender ? (\r\n                column.customHeadRender({ index, ...column }, this.handleToggleColumn)\r\n              ) : (\r\n                <TableHeadCell\r\n                  cellHeaderProps={\r\n                    columns[index].setCellHeaderProps ? columns[index].setCellHeaderProps({ index, ...column }) : {}\r\n                  }\r\n                  key={index}\r\n                  index={index}\r\n                  type={'cell'}\r\n                  ref={el => setCellRef(index + 1, findDOMNode(el))}\r\n                  sort={column.sort}\r\n                  sortDirection={column.sortDirection}\r\n                  toggleSort={this.handleToggleColumn}\r\n                  hint={column.hint}\r\n                  print={column.print}\r\n                  options={options}\r\n                  column={column}>\r\n                  {column.label}\r\n                </TableHeadCell>\r\n              )),\r\n          )}\r\n        </TableHeadRow>\r\n      </MuiTableHead>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultHeadStyles, { name: 'MUIDataTableHead' })(TableHead);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MuiTableRow from '@material-ui/core/TableRow';\r\nimport MuiTableFooter from '@material-ui/core/TableFooter';\r\nimport MuiTablePagination from '@material-ui/core/TablePagination';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { getPageValue } from '../utils';\r\n\r\nconst defaultPaginationStyles = {\r\n  root: {\r\n    '&:last-child': {\r\n      padding: '0px 24px 0px 24px',\r\n    },\r\n  },\r\n  toolbar: {},\r\n  selectRoot: {},\r\n  '@media screen and (max-width: 400px)': {\r\n    toolbar: {\r\n      '& span:nth-child(2)': {\r\n        display: 'none',\r\n      },\r\n    },\r\n    selectRoot: {\r\n      marginRight: '8px',\r\n    },\r\n  },\r\n};\r\n\r\nclass TablePagination extends React.Component {\r\n  static propTypes = {\r\n    /** Total number of table rows */\r\n    count: PropTypes.number.isRequired,\r\n    /** Options used to describe table */\r\n    options: PropTypes.object.isRequired,\r\n    /** Current page index */\r\n    page: PropTypes.number.isRequired,\r\n    /** Total number allowed of rows per page */\r\n    rowsPerPage: PropTypes.number.isRequired,\r\n    /** Callback to trigger rows per page change */\r\n    changeRowsPerPage: PropTypes.func.isRequired,\r\n  };\r\n\r\n  handleRowChange = event => {\r\n    this.props.changeRowsPerPage(event.target.value);\r\n  };\r\n\r\n  handlePageChange = (_, page) => {\r\n    this.props.changePage(page);\r\n  };\r\n\r\n  render() {\r\n    const { count, classes, options, rowsPerPage, page } = this.props;\r\n    const textLabels = options.textLabels.pagination;\r\n\r\n    return (\r\n      <MuiTableFooter>\r\n        <MuiTableRow>\r\n          <MuiTablePagination\r\n            className={classes.root}\r\n            classes={{\r\n              caption: classes.caption,\r\n              toolbar: classes.toolbar,\r\n              selectRoot: classes.selectRoot,\r\n            }}\r\n            count={count}\r\n            rowsPerPage={rowsPerPage}\r\n            page={getPageValue(count, rowsPerPage, page)}\r\n            labelRowsPerPage={textLabels.rowsPerPage}\r\n            labelDisplayedRows={({ from, to, count }) => `${from}-${to} ${textLabels.displayRows} ${count}`}\r\n            backIconButtonProps={{\r\n              id: 'pagination-back',\r\n              'data-testid': 'pagination-back',\r\n              'aria-label': textLabels.previous,\r\n            }}\r\n            nextIconButtonProps={{\r\n              id: 'pagination-next',\r\n              'data-testid': 'pagination-next',\r\n              'aria-label': textLabels.next,\r\n            }}\r\n            SelectProps={{\r\n              id: 'pagination-input',\r\n              SelectDisplayProps: { id: 'pagination-rows', 'data-testid': 'pagination-rows' },\r\n              MenuProps: {\r\n                id: 'pagination-menu',\r\n                'data-testid': 'pagination-menu',\r\n                MenuListProps: { id: 'pagination-menu-list', 'data-testid': 'pagination-menu-list' },\r\n              },\r\n            }}\r\n            rowsPerPageOptions={options.rowsPerPageOptions}\r\n            onChangePage={this.handlePageChange}\r\n            onChangeRowsPerPage={this.handleRowChange}\r\n          />\r\n        </MuiTableRow>\r\n      </MuiTableFooter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultPaginationStyles, { name: 'MUIDataTablePagination' })(TablePagination);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MuiTable from '@material-ui/core/Table';\r\nimport TableHead from './TableHead';\r\nimport TablePagination from './TablePagination';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nexport const defaultFooterStyles = {};\r\n\r\nclass TableFooter extends React.Component {\r\n  static propTypes = {};\r\n\r\n  render() {\r\n    const { options, rowCount, page, rowsPerPage, changeRowsPerPage, changePage } = this.props;\r\n\r\n    return (\r\n      <MuiTable>\r\n        {options.customFooter\r\n          ? options.customFooter(\r\n              rowCount,\r\n              page,\r\n              rowsPerPage,\r\n              changeRowsPerPage,\r\n              changePage,\r\n              options.textLabels.pagination,\r\n            )\r\n          : options.pagination && (\r\n              <TablePagination\r\n                count={rowCount}\r\n                page={page}\r\n                rowsPerPage={rowsPerPage}\r\n                changeRowsPerPage={changeRowsPerPage}\r\n                changePage={changePage}\r\n                component={'div'}\r\n                options={options}\r\n              />\r\n            )}\r\n      </MuiTable>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableFooter;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { findDOMNode } from 'react-dom';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst defaultResizeStyles = {\r\n  root: {\r\n    position: 'absolute',\r\n  },\r\n  resizer: {\r\n    position: 'absolute',\r\n    width: '1px',\r\n    height: '100%',\r\n    left: '100px',\r\n    cursor: 'ew-resize',\r\n    border: '0.1px solid rgba(224, 224, 224, 1)',\r\n  },\r\n};\r\n\r\nclass TableResize extends React.Component {\r\n  static propTypes = {\r\n    /** Extend the style applied to components */\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  state = {\r\n    resizeCoords: {},\r\n    priorPosition: {},\r\n    startPosition: 0,\r\n    tableWidth: '100%',\r\n    tableHeight: '100%',\r\n  };\r\n\r\n  handleResize = () => {\r\n    if (window.innerWidth !== this.windowWidth) {\r\n      this.windowWidth = window.innerWidth;\r\n      this.setDividers();\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.windowWidth = null;\r\n    this.props.setResizeable(this.setCellRefs);\r\n    this.props.updateDividers(() => this.setState({ updateCoords: true }, () => this.updateWidths));\r\n    window.addEventListener('resize', this.handleResize, false);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.handleResize, false);\r\n  }\r\n\r\n  setCellRefs = (cellsRef, tableRef) => {\r\n    this.cellsRef = cellsRef;\r\n    this.tableRef = tableRef;\r\n    this.setDividers();\r\n  };\r\n\r\n  setDividers = () => {\r\n    const tableEl = findDOMNode(this.tableRef);\r\n    const { width: tableWidth, height: tableHeight } = tableEl.getBoundingClientRect();\r\n    const { priorPosition, resizeCoords } = this.state;\r\n\r\n    let finalCells = Object.entries(this.cellsRef);\r\n\r\n    finalCells.forEach(([key, item]) => {\r\n      if (!item) return;\r\n\r\n      const elRect = item.getBoundingClientRect();\r\n      const elStyle = window.getComputedStyle(item, null);\r\n      const left = resizeCoords[key] !== undefined ? resizeCoords[key].left : undefined;\r\n      const oldLeft = priorPosition[key] || 0;\r\n      let newLeft = elRect.left + item.offsetWidth - parseInt(elStyle.paddingLeft) / 2;\r\n\r\n      if (left === oldLeft) return;\r\n\r\n      resizeCoords[key] = { left: newLeft };\r\n      priorPosition[key] = newLeft;\r\n    });\r\n\r\n    this.setState({ tableWidth, tableHeight, resizeCoords, priorPosition }, this.updateWidths);\r\n  };\r\n\r\n  updateWidths = () => {\r\n    let lastPosition = 0;\r\n    const { resizeCoords, tableWidth } = this.state;\r\n\r\n    Object.entries(resizeCoords).forEach(([key, item]) => {\r\n      let newWidth = Number(((item.left - lastPosition) / tableWidth) * 100).toFixed(2);\r\n      lastPosition = item.left;\r\n\r\n      const thCell = this.cellsRef[key];\r\n      if (thCell) thCell.style.width = newWidth + '%';\r\n    });\r\n  };\r\n\r\n  onResizeStart = (id, e) => {\r\n    this.setState({ isResize: true, id, startPosition: e.clientX });\r\n  };\r\n\r\n  onResizeMove = (id, e) => {\r\n    const { startPosition, isResize, resizeCoords } = this.state;\r\n\r\n    if (isResize) {\r\n      const leftPos = startPosition - (startPosition - e.clientX);\r\n\r\n      const curCoord = { ...resizeCoords[id], left: leftPos };\r\n      const newResizeCoords = { ...resizeCoords, [id]: curCoord };\r\n\r\n      this.setState({ resizeCoords: newResizeCoords }, this.updateWidths);\r\n    }\r\n  };\r\n\r\n  onResizeEnd = (id, e) => {\r\n    this.setState({ isResize: false, id: null });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { id, isResize, resizeCoords, tableWidth, tableHeight } = this.state;\r\n\r\n    return (\r\n      <div className={classes.root} style={{ width: tableWidth }}>\r\n        {Object.entries(resizeCoords).map(([key, val]) => {\r\n          return (\r\n            <div\r\n              aria-hidden=\"true\"\r\n              key={key}\r\n              onMouseMove={this.onResizeMove.bind(null, key)}\r\n              onMouseUp={this.onResizeEnd.bind(null, key)}\r\n              style={{\r\n                width: isResize && id == key ? tableWidth : 'auto',\r\n                position: 'absolute',\r\n                height: tableHeight,\r\n                zIndex: 1000,\r\n              }}>\r\n              <div\r\n                aria-hidden=\"true\"\r\n                onMouseDown={this.onResizeStart.bind(null, key)}\r\n                className={classes.resizer}\r\n                style={{ left: val.left }}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultResizeStyles, { name: 'MUIDataTableResize' })(TableResize);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MuiPopover from '@material-ui/core/Popover';\r\nimport { findDOMNode } from 'react-dom';\r\n\r\nclass Popover extends React.Component {\r\n  state = {\r\n    open: false,\r\n  };\r\n\r\n  UNSAFE_componentWillMount() {\r\n    this.anchorEl = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.refClose) {\r\n      this.props.refClose(this.handleRequestClose);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    /*\r\n     * Update Popover position if a filter removes data from the table because\r\n     * it affects the window height which would cause the Popover to in the wrong place\r\n     */\r\n    if (this.state.open === true) {\r\n      this.anchorEl = findDOMNode(this.anchorEl);\r\n      this.popoverActions && this.popoverActions.updatePosition();\r\n    }\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.anchorEl = findDOMNode(this.anchorEl);\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleRequestClose = cb => {\r\n    this.setState({ open: false }, cb && typeof cb === 'function' ? cb() : () => {});\r\n  };\r\n\r\n  handleOnExit = () => {\r\n    if (this.props.refExit) {\r\n      this.props.refExit();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { className, placement, trigger, refExit, content, ...providedProps } = this.props;\r\n\r\n    const transformOriginSpecs = {\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    };\r\n\r\n    const anchorOriginSpecs = {\r\n      vertical: 'bottom',\r\n      horizontal: 'center',\r\n    };\r\n\r\n    const triggerEl = React.cloneElement(<span>{trigger}</span>, {\r\n      key: 'content',\r\n      ref: el => (this.anchorEl = el),\r\n      onClick: () => {\r\n        if (trigger.props.onClick) trigger.props.onClick();\r\n        this.handleClick();\r\n      },\r\n    });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <MuiPopover\r\n          action={actions => (this.popoverActions = actions)}\r\n          elevation={2}\r\n          open={this.state.open}\r\n          onClose={this.handleRequestClose}\r\n          onExited={this.handleOnExit}\r\n          anchorEl={this.anchorEl}\r\n          ref={el => this.popoverEl}\r\n          anchorOrigin={anchorOriginSpecs}\r\n          transformOrigin={transformOriginSpecs}\r\n          {...providedProps}>\r\n          {content}\r\n        </MuiPopover>\r\n        {triggerEl}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Popover;\r\n","import { Grid, GridList, GridListTile, TextField } from '@material-ui/core';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport Select from '@material-ui/core/Select';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport classNames from 'classnames';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nexport const defaultFilterStyles = theme => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: '24px 24px 36px 24px',\r\n    fontFamily: 'Roboto',\r\n  },\r\n  header: {\r\n    flex: '0 0 auto',\r\n    marginBottom: '16px',\r\n    width: '100%',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n  title: {\r\n    display: 'inline-block',\r\n    marginLeft: '7px',\r\n    color: theme.palette.text.primary,\r\n    fontSize: '14px',\r\n    fontWeight: 500,\r\n  },\r\n  noMargin: {\r\n    marginLeft: '0px',\r\n  },\r\n  reset: {\r\n    alignSelf: 'left',\r\n  },\r\n  resetLink: {\r\n    marginLeft: '16px',\r\n    fontSize: '12px',\r\n    cursor: 'pointer',\r\n  },\r\n  filtersSelected: {\r\n    alignSelf: 'right',\r\n  },\r\n  /* checkbox */\r\n  checkboxListTitle: {\r\n    marginLeft: '7px',\r\n    marginBottom: '8px',\r\n    fontSize: '14px',\r\n    color: theme.palette.text.secondary,\r\n    textAlign: 'left',\r\n    fontWeight: 500,\r\n  },\r\n  checkboxFormGroup: {\r\n    marginTop: '8px',\r\n  },\r\n  checkboxFormControl: {\r\n    margin: '0px',\r\n  },\r\n  checkboxFormControlLabel: {\r\n    fontSize: '15px',\r\n    marginLeft: '8px',\r\n    color: theme.palette.text.primary,\r\n  },\r\n  checkboxIcon: {\r\n    width: '32px',\r\n    height: '32px',\r\n  },\r\n  checkbox: {\r\n    '&$checked': {\r\n      color: theme.palette.primary.main,\r\n    },\r\n  },\r\n  checked: {},\r\n  gridListTile: {\r\n    marginTop: '16px',\r\n  },\r\n});\r\n\r\nfunction TableFilter({\r\n  classes,\r\n  columns,\r\n  options,\r\n  onFilterReset,\r\n  customFooter,\r\n  filterList,\r\n  onFilterUpdate,\r\n  filterData,\r\n  onFilterApply,\r\n}) {\r\n  const textLabels = options.textLabels.filter;\r\n  const filterGridColumns = columns.filter(col => col.filter).length === 1 ? 1 : 2;\r\n\r\n  const [filters, setFilters] = useState([]);\r\n  const [reset, setReset] = useState(false);\r\n\r\n  useEffect(\r\n    () => {\r\n      const state = columns.reduce(\r\n        (p, n, i) => ({ ...p, [i]: { filter: filterList[i], column: n, type: n.filterType || options.filterType } }),\r\n        {},\r\n      );\r\n      setFilters(state);\r\n    },\r\n    [filterList, columns],\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.header}>\r\n        <div className={classes.reset}>\r\n          <Typography\r\n            variant=\"body2\"\r\n            className={classNames({\r\n              [classes.title]: true,\r\n            })}>\r\n            {textLabels.title}\r\n          </Typography>\r\n          <Button\r\n            color=\"primary\"\r\n            className={classes.resetLink}\r\n            tabIndex={0}\r\n            aria-label={textLabels.reset}\r\n            data-testid={'filterReset-button'}\r\n            onClick={() => {\r\n              Object.keys(filters).forEach(i => {\r\n                const filter = filters[i];\r\n\r\n                if (filter.filter === filterList[i] && filter.type != 'custom') return;\r\n                onFilterUpdate(i, filter.filter, filter.column, filter.type);\r\n              });\r\n\r\n              onFilterApply();\r\n            }}>\r\n            Apply\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            className={classes.resetLink}\r\n            tabIndex={0}\r\n            aria-label={textLabels.reset}\r\n            data-testid={'filterReset-button'}\r\n            onClick={onFilterReset}>\r\n            {textLabels.reset}\r\n          </Button>\r\n        </div>\r\n        <div className={classes.filtersSelected} />\r\n      </div>\r\n      <GridList cellHeight=\"auto\" cols={filterGridColumns} spacing={34}>\r\n        {Object.keys(filters).map(i => {\r\n          const { filter, column } = filters[i];\r\n\r\n          if (column.filter) {\r\n            const filterType = column.filterType || options.filterType;\r\n            return filterType === 'checkbox' ? (\r\n              <div key={i}>\r\n                <RenderCheckBox\r\n                  options={options}\r\n                  filterData={filterData[i]}\r\n                  value={filter}\r\n                  column={column}\r\n                  classes={classes}\r\n                  filterList={filterList}\r\n                  index={i}\r\n                  onFilterUpdate={value => setFilters({ ...filters, [i]: { ...filters[i], filter: value } })}\r\n                />\r\n              </div>\r\n            ) : filterType === 'multiselect' ? (\r\n              <div key={i}>\r\n                <RenderMultiselect\r\n                  options={options}\r\n                  filterData={filterData[i]}\r\n                  value={filter || []}\r\n                  column={column}\r\n                  classes={classes}\r\n                  filterList={filterList}\r\n                  index={i}\r\n                  onFilterUpdate={value => setFilters({ ...filters, [i]: { ...filters[i], filter: value } })}\r\n                />\r\n              </div>\r\n            ) : filterType === 'textField' ? (\r\n              <div key={i}>\r\n                <RenderTextField\r\n                  value={filter.toString() || ''}\r\n                  column={column}\r\n                  classes={classes}\r\n                  filterList={filterList}\r\n                  index={i}\r\n                  onFilterUpdate={value => setFilters({ ...filters, [i]: { ...filters[i], filter: value } })}\r\n                />\r\n              </div>\r\n            ) : filterType === 'custom' ? (\r\n              <div key={i}>\r\n                <RenderCustomField\r\n                  index={i}\r\n                  filterList={filterList}\r\n                  options={options}\r\n                  filterData={filterData[i]}\r\n                  value={filter || []}\r\n                  column={column}\r\n                  classes={classes}\r\n                  filterList={filterList}\r\n                  index={i}\r\n                  onFilterUpdate={value => setFilters({ ...filters, [i]: { ...filters[i], filter: value } })}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <div key={i}>\r\n                <RenderSelect\r\n                  options={options}\r\n                  filterData={filterData[i]}\r\n                  value={filter.length ? filter.toString() : textLabels.all}\r\n                  column={column}\r\n                  classes={classes}\r\n                  filterList={filterList}\r\n                  index={i}\r\n                  onFilterUpdate={value => setFilters({ ...filters, [i]: { ...filters[i], filter: value } })}\r\n                />\r\n              </div>\r\n            );\r\n          }\r\n        })}\r\n      </GridList>\r\n      {customFooter ? customFooter(filterList) : ''}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction RenderSelect({ value, classes, column, onFilterUpdate, filterData, options }) {\r\n  const textLabels = options.textLabels.filter;\r\n\r\n  const handleDropdownChange = event => {\r\n    const labelFilterAll = options.textLabels.filter.all;\r\n    const value = event.target.value === labelFilterAll ? [] : [event.target.value];\r\n    onFilterUpdate(value);\r\n  };\r\n\r\n  return (\r\n    <GridListTile cols={1} classes={{ tile: classes.gridListTile }}>\r\n      <FormControl fullWidth>\r\n        <InputLabel htmlFor={column.name}>{column.label}</InputLabel>\r\n        <Select\r\n          fullWidth\r\n          value={value}\r\n          name={column.name}\r\n          onChange={event => handleDropdownChange(event)}\r\n          input={<Input name={column.name} id={column.name} />}>\r\n          <MenuItem value={textLabels.all} key={0}>\r\n            {textLabels.all}\r\n          </MenuItem>\r\n          {filterData.map((filterValue, filterIndex) => (\r\n            <MenuItem value={filterValue} key={filterIndex + 1}>\r\n              {filterValue != null ? filterValue.toString() : ''}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </GridListTile>\r\n  );\r\n}\r\n\r\nfunction RenderCustomField({ index, filterList, value, classes, column, onFilterUpdate, filterData, options }) {\r\n  const display =\r\n    (column.filterOptions && column.filterOptions.display) || (options.filterOptions && options.filterOptions.display);\r\n\r\n  if (!display) {\r\n    console.error('Property \"display\" is required when using custom filter type.');\r\n    return;\r\n  }\r\n  return (\r\n    <GridListTile cols={1} classes={{ tile: classes.gridListTile }}>\r\n      {display(\r\n        filterList,\r\n        value => {\r\n          onFilterUpdate(value);\r\n          console.log(value);\r\n        },\r\n        index,\r\n        column,\r\n      )}\r\n    </GridListTile>\r\n  );\r\n}\r\n\r\nfunction RenderTextField({ value, classes, column, index, onFilterUpdate }) {\r\n  return (\r\n    <GridListTile key={index} cols={1} classes={{ tile: classes.gridListTile }}>\r\n      <FormControl key={index} fullWidth>\r\n        <TextField\r\n          fullWidth\r\n          label={column.label}\r\n          value={value}\r\n          onChange={event => onFilterUpdate(event.target.value)}\r\n        />\r\n      </FormControl>\r\n    </GridListTile>\r\n  );\r\n}\r\n\r\nfunction RenderMultiselect({ value, classes, column, onFilterUpdate, filterData, options }) {\r\n  return (\r\n    <GridListTile cols={1} classes={{ tile: classes.gridListTile }}>\r\n      <FormControl fullWidth>\r\n        <InputLabel htmlFor={column.name}>{column.label}</InputLabel>\r\n        <Select\r\n          multiple\r\n          fullWidth\r\n          value={value}\r\n          renderValue={selected => selected.join(', ')}\r\n          name={column.name}\r\n          onChange={event => onFilterUpdate(event.target.value)}\r\n          input={<Input name={column.name} id={column.name} />}>\r\n          {filterData.map((filterValue, filterIndex) => (\r\n            <MenuItem value={filterValue} key={filterIndex + 1}>\r\n              <Checkbox\r\n                checked={value.indexOf(filterValue) >= 0 ? true : false}\r\n                value={filterValue != null ? filterValue.toString() : ''}\r\n                className={classes.checkboxIcon}\r\n                classes={{\r\n                  root: classes.checkbox,\r\n                  checked: classes.checked,\r\n                }}\r\n              />\r\n              <ListItemText primary={filterValue} />\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </GridListTile>\r\n  );\r\n}\r\n\r\nfunction RenderCheckBox({ value, classes, column, onFilterUpdate, filterData, options }) {\r\n  return (\r\n    <GridListTile cols={2}>\r\n      <FormGroup>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"body2\" className={classes.checkboxListTitle}>\r\n            {column.label}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container>\r\n          {filterData.map((filterValue, filterIndex) => (\r\n            <Grid item key={filterIndex}>\r\n              <FormControlLabel\r\n                key={filterIndex}\r\n                classes={{\r\n                  root: classes.checkboxFormControl,\r\n                  label: classes.checkboxFormControlLabel,\r\n                }}\r\n                control={\r\n                  <Checkbox\r\n                    className={classes.checkboxIcon}\r\n                    onChange={() => {\r\n                      const updated = value;\r\n                      const index = value.indexOf(filterValue);\r\n                      if (index >= 0) {\r\n                        updated.splice(index, 1);\r\n                      } else {\r\n                        updated.push(filterValue);\r\n                      }\r\n                      onFilterUpdate(updated);\r\n                    }}\r\n                    checked={value && value.indexOf(filterValue) >= 0 ? true : false}\r\n                    classes={{\r\n                      root: classes.checkbox,\r\n                      checked: classes.checked,\r\n                    }}\r\n                    value={filterValue != null ? filterValue.toString() : ''}\r\n                  />\r\n                }\r\n                label={filterValue}\r\n              />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </FormGroup>\r\n    </GridListTile>\r\n  );\r\n}\r\n\r\nexport default withStyles(defaultFilterStyles, { name: 'MUIDataTableFilter' })(TableFilter);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nexport const defaultViewColStyles = theme => ({\r\n  root: {\r\n    padding: '16px 24px 16px 24px',\r\n    fontFamily: 'Roboto',\r\n  },\r\n  title: {\r\n    marginLeft: '-7px',\r\n    fontSize: '14px',\r\n    color: theme.palette.text.secondary,\r\n    textAlign: 'left',\r\n    fontWeight: 500,\r\n  },\r\n  formGroup: {\r\n    marginTop: '8px',\r\n  },\r\n  formControl: {},\r\n  checkbox: {\r\n    padding: '0px',\r\n    width: '32px',\r\n    height: '32px',\r\n  },\r\n  checkboxRoot: {\r\n    '&$checked': {\r\n      color: theme.palette.primary.main,\r\n    },\r\n  },\r\n  checked: {},\r\n  label: {\r\n    fontSize: '15px',\r\n    marginLeft: '8px',\r\n    color: theme.palette.text.primary,\r\n  },\r\n});\r\n\r\nclass TableViewCol extends React.Component {\r\n  static propTypes = {\r\n    /** Columns used to describe table */\r\n    columns: PropTypes.array.isRequired,\r\n    /** Options used to describe table */\r\n    options: PropTypes.object.isRequired,\r\n    /** Callback to trigger View column update */\r\n    onColumnUpdate: PropTypes.func,\r\n    /** Extend the style applied to components */\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  handleColChange = index => {\r\n    this.props.onColumnUpdate(index);\r\n  };\r\n\r\n  render() {\r\n    const { classes, columns, options } = this.props;\r\n    const textLabels = options.textLabels.viewColumns;\r\n\r\n    return (\r\n      <FormControl component={'fieldset'} className={classes.root} aria-label={textLabels.titleAria}>\r\n        <Typography variant=\"caption\" className={classes.title}>\r\n          {textLabels.title}\r\n        </Typography>\r\n        <FormGroup className={classes.formGroup}>\r\n          {columns.map((column, index) => {\r\n            return (\r\n              column.display !== 'excluded' &&\r\n              column.viewColumns !== false && (\r\n                <FormControlLabel\r\n                  key={index}\r\n                  classes={{\r\n                    root: classes.formControl,\r\n                    label: classes.label,\r\n                  }}\r\n                  control={\r\n                    <Checkbox\r\n                      className={classes.checkbox}\r\n                      classes={{\r\n                        root: classes.checkboxRoot,\r\n                        checked: classes.checked,\r\n                      }}\r\n                      onChange={this.handleColChange.bind(null, index)}\r\n                      checked={column.display === 'true'}\r\n                      value={column.name}\r\n                    />\r\n                  }\r\n                  label={column.label}\r\n                />\r\n              )\r\n            );\r\n          })}\r\n        </FormGroup>\r\n      </FormControl>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultViewColStyles, { name: 'MUIDataTableViewCol' })(TableViewCol);\r\n","import React from 'react';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst defaultSearchStyles = theme => ({\r\n  main: {\r\n    display: 'flex',\r\n    flex: '1 0 auto',\r\n  },\r\n  searchIcon: {\r\n    color: theme.palette.text.secondary,\r\n    marginTop: '10px',\r\n    marginRight: '8px',\r\n  },\r\n  searchText: {\r\n    flex: '0.8 0',\r\n  },\r\n  clearIcon: {\r\n    '&:hover': {\r\n      color: theme.palette.error.main,\r\n    },\r\n  },\r\n});\r\n\r\nclass TableSearch extends React.Component {\r\n  handleTextChange = event => {\r\n    this.props.onSearch(event.target.value);\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this.onKeyDown, false);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this.onKeyDown, false);\r\n  }\r\n\r\n  onKeyDown = event => {\r\n    if (event.keyCode === 27) {\r\n      this.props.onHide();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes, options, onHide, searchText } = this.props;\r\n\r\n    return (\r\n      <Grow appear in={true} timeout={300}>\r\n        <div className={classes.main} ref={el => (this.rootRef = el)}>\r\n          <SearchIcon className={classes.searchIcon} />\r\n          <TextField\r\n            className={classes.searchText}\r\n            autoFocus={true}\r\n            InputProps={{\r\n              'data-test-id': options.textLabels.toolbar.search,\r\n            }}\r\n            inputProps={{\r\n              'aria-label': options.textLabels.toolbar.search,\r\n            }}\r\n            value={searchText || ''}\r\n            onChange={this.handleTextChange}\r\n            fullWidth={true}\r\n            inputRef={el => (this.searchField = el)}\r\n            placeholder={options.searchPlaceholder}\r\n          />\r\n          <IconButton className={classes.clearIcon} onClick={onHide}>\r\n            <ClearIcon />\r\n          </IconButton>\r\n        </div>\r\n      </Grow>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultSearchStyles, { name: 'MUIDataTableSearch' })(TableSearch);\r\n","import React, { useState } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Popover from './Popover';\r\nimport TableFilter from './TableFilter';\r\nimport TableViewCol from './TableViewCol';\r\nimport TableSearch from './TableSearch';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport ViewColumnIcon from '@material-ui/icons/ViewColumn';\r\nimport FilterIcon from '@material-ui/icons/FilterList';\r\nimport ReactToPrint from 'react-to-print';\r\nimport find from 'lodash.find';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { createCSVDownload, downloadCSV } from '../utils';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nexport const defaultToolbarStyles = theme => ({\r\n  root: {},\r\n  fullWidthRoot: {},\r\n  left: {\r\n    flex: '1 1 auto',\r\n  },\r\n  fullWidthLeft: {\r\n    flex: '1 1 auto',\r\n  },\r\n  actions: {\r\n    flex: '1 1 auto',\r\n    textAlign: 'right',\r\n  },\r\n  fullWidthActions: {\r\n    flex: '1 1 auto',\r\n    textAlign: 'right',\r\n  },\r\n  titleRoot: {},\r\n  titleText: {},\r\n  fullWidthTitleText: {\r\n    textAlign: 'left',\r\n  },\r\n  icon: {\r\n    '&:hover': {\r\n      color: theme.palette.primary.main,\r\n    },\r\n  },\r\n  iconActive: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n  filterPaper: {\r\n    maxWidth: '50%',\r\n  },\r\n  searchIcon: {\r\n    display: 'inline-flex',\r\n    marginTop: '10px',\r\n    marginRight: '8px',\r\n  },\r\n  [theme.breakpoints.down('sm')]: {\r\n    titleRoot: {},\r\n    titleText: {\r\n      fontSize: '16px',\r\n    },\r\n    spacer: {\r\n      display: 'none',\r\n    },\r\n    left: {\r\n      // flex: \"1 1 40%\",\r\n      padding: '8px 0px',\r\n    },\r\n    actions: {\r\n      // flex: \"1 1 60%\",\r\n      textAlign: 'right',\r\n    },\r\n  },\r\n  [theme.breakpoints.down('xs')]: {\r\n    root: {\r\n      display: 'block',\r\n    },\r\n    left: {\r\n      padding: '8px 0px 0px 0px',\r\n    },\r\n    titleText: {\r\n      textAlign: 'center',\r\n    },\r\n    actions: {\r\n      textAlign: 'center',\r\n    },\r\n  },\r\n  '@media screen and (max-width: 480px)': {},\r\n});\r\n\r\nconst RESPONSIVE_FULL_WIDTH_NAME = 'scrollFullHeightFullWidth';\r\n\r\nclass TableToolbar extends React.Component {\r\n  state = {\r\n    iconActive: null,\r\n    showSearch: Boolean(this.props.searchText || this.props.options.searchText || this.props.options.searchOpen),\r\n    searchText: this.props.searchText || null,\r\n    open: false,\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.searchText !== prevProps.searchText) {\r\n      this.setState({ searchText: this.props.searchText });\r\n    }\r\n  }\r\n\r\n  handleCSVDownload = () => {\r\n    const { data, displayData, columns, options } = this.props;\r\n    let dataToDownload = cloneDeep(data);\r\n    let columnsToDownload = columns;\r\n\r\n    if (options.downloadOptions && options.downloadOptions.filterOptions) {\r\n      // check rows first:\r\n      if (options.downloadOptions.filterOptions.useDisplayedRowsOnly) {\r\n        dataToDownload = displayData.map((row, index) => {\r\n          let i = -1;\r\n\r\n          // Help to preserve sort order in custom render columns\r\n          row.index = index;\r\n\r\n          return {\r\n            data: row.data.map(column => {\r\n              i += 1;\r\n\r\n              // if we have a custom render, which will appear as a react element, we must grab the actual value from data\r\n              // that matches the dataIndex and column\r\n              // TODO: Create a utility function for checking whether or not something is a react object\r\n              return typeof column === 'object' && column !== null && !Array.isArray(column)\r\n                ? find(data, d => d.index === row.dataIndex).data[i]\r\n                : column;\r\n            }),\r\n          };\r\n        });\r\n      }\r\n\r\n      // now, check columns:\r\n      if (options.downloadOptions.filterOptions.useDisplayedColumnsOnly) {\r\n        columnsToDownload = columns.filter((_, index) => _.display === 'true');\r\n\r\n        dataToDownload = dataToDownload.map(row => {\r\n          row.data = row.data.filter((_, index) => columns[index].display === 'true');\r\n          return row;\r\n        });\r\n      }\r\n    }\r\n    createCSVDownload(columnsToDownload, dataToDownload, options, downloadCSV);\r\n  };\r\n\r\n  setActiveIcon = iconName => {\r\n    this.setState(\r\n      prevState => ({\r\n        showSearch: this.isSearchShown(iconName),\r\n        iconActive: iconName,\r\n        prevIconActive: prevState.iconActive,\r\n      }),\r\n      () => {\r\n        const { iconActive, prevIconActive } = this.state;\r\n\r\n        if (iconActive === 'filter') {\r\n          this.props.setTableAction('onFilterDialogOpen');\r\n          if (this.props.options.onFilterDialogOpen) {\r\n            this.props.options.onFilterDialogOpen();\r\n          }\r\n        }\r\n        if (iconActive === undefined && prevIconActive === 'filter') {\r\n          this.props.setTableAction('onFilterDialogClose');\r\n          if (this.props.options.onFilterDialogClose) {\r\n            this.props.options.onFilterDialogClose();\r\n          }\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  isSearchShown = iconName => {\r\n    let nextVal = false;\r\n    if (this.state.showSearch) {\r\n      if (this.state.searchText) {\r\n        nextVal = true;\r\n      } else {\r\n        const { onSearchClose } = this.props.options;\r\n        this.props.setTableAction('onSearchClose');\r\n        if (onSearchClose) onSearchClose();\r\n        nextVal = false;\r\n      }\r\n    } else if (iconName === 'search') {\r\n      nextVal = this.showSearch();\r\n    }\r\n    return nextVal;\r\n  };\r\n\r\n  getActiveIcon = (styles, iconName) => {\r\n    let isActive = this.state.iconActive === iconName;\r\n    if (iconName === 'search') {\r\n      const { showSearch, searchText } = this.state;\r\n      isActive = isActive || showSearch || searchText;\r\n    }\r\n    return isActive ? styles.iconActive : styles.icon;\r\n  };\r\n\r\n  showSearch = () => {\r\n    this.props.setTableAction('onSearchOpen');\r\n    !!this.props.options.onSearchOpen && this.props.options.onSearchOpen();\r\n    return true;\r\n  };\r\n\r\n  hideSearch = () => {\r\n    const { onSearchClose } = this.props.options;\r\n\r\n    this.props.setTableAction('onSearchClose');\r\n    if (onSearchClose) onSearchClose();\r\n    this.props.searchClose();\r\n\r\n    this.setState(() => ({\r\n      iconActive: null,\r\n      showSearch: false,\r\n      searchText: null,\r\n    }));\r\n\r\n    this.searchButton.focus();\r\n  };\r\n\r\n  handleSearch = value => {\r\n    this.setState({ searchText: value });\r\n    this.props.searchTextUpdate(value);\r\n  };\r\n\r\n  handleSearchIconClick = () => {\r\n    const { showSearch, searchText } = this.state;\r\n    if (showSearch && !searchText) {\r\n      this.hideSearch();\r\n    } else {\r\n      this.setActiveIcon('search');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      data,\r\n      options,\r\n      classes,\r\n      columns,\r\n      filterData,\r\n      filterList,\r\n      filterUpdate,\r\n      resetFilters,\r\n      toggleViewColumn,\r\n      title,\r\n      tableRef,\r\n    } = this.props;\r\n\r\n    const { search, downloadCsv, print, viewColumns, filterTable } = options.textLabels.toolbar;\r\n    const { showSearch, searchText } = this.state;\r\n\r\n    return (\r\n      <Toolbar\r\n        className={options.responsive !== RESPONSIVE_FULL_WIDTH_NAME ? classes.root : classes.fullWidthRoot}\r\n        role={'toolbar'}\r\n        aria-label={'Table Toolbar'}>\r\n        <div className={options.responsive !== RESPONSIVE_FULL_WIDTH_NAME ? classes.left : classes.fullWidthLeft}>\r\n          {showSearch === true ? (\r\n            options.customSearchRender ? (\r\n              options.customSearchRender(searchText, this.handleSearch, this.hideSearch, options)\r\n            ) : (\r\n              <TableSearch\r\n                searchText={searchText}\r\n                onSearch={this.handleSearch}\r\n                onHide={this.hideSearch}\r\n                options={options}\r\n              />\r\n            )\r\n          ) : typeof title !== 'string' ? (\r\n            title\r\n          ) : (\r\n            <div className={classes.titleRoot} aria-hidden={'true'}>\r\n              <Typography\r\n                variant=\"h6\"\r\n                className={\r\n                  options.responsive !== RESPONSIVE_FULL_WIDTH_NAME ? classes.titleText : classes.fullWidthTitleText\r\n                }>\r\n                {title}\r\n              </Typography>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className={options.responsive !== RESPONSIVE_FULL_WIDTH_NAME ? classes.actions : classes.fullWidthActions}>\r\n          {options.search && (\r\n            <Tooltip title={search} disableFocusListener>\r\n              <IconButton\r\n                aria-label={search}\r\n                data-testid={search + '-iconButton'}\r\n                buttonRef={el => (this.searchButton = el)}\r\n                classes={{ root: this.getActiveIcon(classes, 'search') }}\r\n                onClick={this.handleSearchIconClick}>\r\n                <SearchIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n          {options.download && (\r\n            <Tooltip title={downloadCsv}>\r\n              <IconButton\r\n                data-testid={downloadCsv + '-iconButton'}\r\n                aria-label={downloadCsv}\r\n                classes={{ root: classes.icon }}\r\n                onClick={this.handleCSVDownload}>\r\n                <DownloadIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n          {options.print && (\r\n            <span>\r\n              <ReactToPrint\r\n                trigger={() => (\r\n                  <span>\r\n                    <Tooltip title={print}>\r\n                      <IconButton\r\n                        data-testid={print + '-iconButton'}\r\n                        aria-label={print}\r\n                        classes={{ root: classes.icon }}>\r\n                        <PrintIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </span>\r\n                )}\r\n                content={() => this.props.tableRef()}\r\n              />\r\n            </span>\r\n          )}\r\n          {options.viewColumns && (\r\n            <Popover\r\n              refExit={this.setActiveIcon.bind(null)}\r\n              trigger={\r\n                <Tooltip title={viewColumns} disableFocusListener>\r\n                  <IconButton\r\n                    data-testid={viewColumns + '-iconButton'}\r\n                    aria-label={viewColumns}\r\n                    classes={{ root: this.getActiveIcon(classes, 'viewcolumns') }}\r\n                    onClick={this.setActiveIcon.bind(null, 'viewcolumns')}>\r\n                    <ViewColumnIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              }\r\n              content={\r\n                <TableViewCol data={data} columns={columns} options={options} onColumnUpdate={toggleViewColumn} />\r\n              }\r\n            />\r\n          )}\r\n          {options.filter && (\r\n            <Popover\r\n              open={this.state.open}\r\n              classes={{ paper: classes.filterPaper }}\r\n              trigger={\r\n                <Tooltip title={filterTable} disableFocusListener>\r\n                  <IconButton\r\n                    data-testid={filterTable + '-iconButton'}\r\n                    aria-label={filterTable}\r\n                    classes={{ root: this.getActiveIcon(classes, 'filter') }}\r\n                    onClick={() => {\r\n                      this.setActiveIcon.bind(null, 'filter')();\r\n                      this.setState({ ...this.state, open: true });\r\n                    }}>\r\n                    <FilterIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              }\r\n              content={\r\n                <TableFilter\r\n                  customFooter={options.customFilterDialogFooter}\r\n                  columns={columns}\r\n                  options={options}\r\n                  filterList={filterList}\r\n                  filterData={filterData}\r\n                  onFilterUpdate={filterUpdate}\r\n                  onFilterReset={() => {\r\n                    this.setActiveIcon.bind(null)();\r\n                    this.setState({ ...this.state, open: false });\r\n                    resetFilters();\r\n                  }}\r\n                  onFilterApply={() => {\r\n                    this.setActiveIcon.bind(null)();\r\n                    this.setState({ ...this.state, open: false });\r\n                  }}\r\n                />\r\n              }\r\n            />\r\n          )}\r\n          {options.customToolbar && options.customToolbar()}\r\n        </div>\r\n      </Toolbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultToolbarStyles, { name: 'MUIDataTableToolbar' })(TableToolbar);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst defaultToolbarSelectStyles = theme => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.default,\r\n    flex: '1 1 100%',\r\n    display: 'flex',\r\n    position: 'relative',\r\n    zIndex: 120,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    paddingTop: typeof theme.spacing === 'function' ? theme.spacing(1) : theme.spacing.unit,\r\n    paddingBottom: typeof theme.spacing === 'function' ? theme.spacing(1) : theme.spacing.unit,\r\n  },\r\n  title: {\r\n    paddingLeft: '26px',\r\n  },\r\n  iconButton: {\r\n    marginRight: '24px',\r\n  },\r\n  deleteIcon: {},\r\n});\r\n\r\nclass TableToolbarSelect extends React.Component {\r\n  static propTypes = {\r\n    /** Options used to describe table */\r\n    options: PropTypes.object.isRequired,\r\n    /** Current row selected or not */\r\n    rowSelected: PropTypes.bool,\r\n    /** Callback to trigger selected rows delete */\r\n    onRowsDelete: PropTypes.func,\r\n    /** Extend the style applied to components */\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  /**\r\n   * @param {number[]} selectedRows Array of rows indexes that are selected, e.g. [0, 2] will select first and third rows in table\r\n   */\r\n  handleCustomSelectedRows = selectedRows => {\r\n    if (!Array.isArray(selectedRows)) {\r\n      throw new TypeError(`\"selectedRows\" must be an \"array\", but it's \"${typeof selectedRows}\"`);\r\n    }\r\n\r\n    if (selectedRows.some(row => typeof row !== 'number')) {\r\n      throw new TypeError(`Array \"selectedRows\" must contain only numbers`);\r\n    }\r\n\r\n    const { options } = this.props;\r\n    if (selectedRows.length > 1 && options.selectableRows === 'single') {\r\n      throw new Error('Can not select more than one row when \"selectableRows\" is \"single\"');\r\n    }\r\n    this.props.selectRowUpdate('custom', selectedRows);\r\n  };\r\n\r\n  render() {\r\n    const { classes, onRowsDelete, selectedRows, options, displayData } = this.props;\r\n    const textLabels = options.textLabels.selectedRows;\r\n\r\n    return (\r\n      <Paper className={classes.root}>\r\n        <div>\r\n          <Typography variant=\"subtitle1\" className={classes.title}>\r\n            {selectedRows.data.length} {textLabels.text}\r\n          </Typography>\r\n        </div>\r\n        {options.customToolbarSelect ? (\r\n          options.customToolbarSelect(selectedRows, displayData, this.handleCustomSelectedRows)\r\n        ) : (\r\n          <Tooltip title={textLabels.delete}>\r\n            <IconButton className={classes.iconButton} onClick={onRowsDelete} aria-label={textLabels.deleteAria}>\r\n              <DeleteIcon className={classes.deleteIcon} />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultToolbarSelectStyles, { name: 'MUIDataTableToolbarSelect' })(TableToolbarSelect);\r\n","/*\r\n * Default text labels.\r\n */\r\nconst getTextLabels = () => ({\r\n  body: {\r\n    noMatch: 'Sorry, no matching records found',\r\n    toolTip: 'Sort',\r\n  },\r\n  pagination: {\r\n    next: 'Next Page',\r\n    previous: 'Previous Page',\r\n    rowsPerPage: 'Rows per page:',\r\n    displayRows: 'of',\r\n  },\r\n  toolbar: {\r\n    search: 'Search',\r\n    downloadCsv: 'Download CSV',\r\n    print: 'Print',\r\n    viewColumns: 'View Columns',\r\n    filterTable: 'Filter Table',\r\n  },\r\n  filter: {\r\n    all: 'All',\r\n    title: 'FILTERS',\r\n    reset: 'RESET',\r\n  },\r\n  viewColumns: {\r\n    title: 'Show Columns',\r\n    titleAria: 'Show/Hide Table Columns',\r\n  },\r\n  selectedRows: {\r\n    text: 'row(s) selected',\r\n    delete: 'Delete',\r\n    deleteAria: 'Delete Selected Rows',\r\n  },\r\n});\r\n\r\nexport default getTextLabels;\r\n","import Paper from '@material-ui/core/Paper';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MuiTable from '@material-ui/core/Table';\r\nimport classnames from 'classnames';\r\nimport assignwith from 'lodash.assignwith';\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport find from 'lodash.find';\r\nimport isUndefined from 'lodash.isundefined';\r\nimport merge from 'lodash.merge';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport TableBody from './components/TableBody';\r\nimport TableFilterList from './components/TableFilterList';\r\nimport TableFooter from './components/TableFooter';\r\nimport TableHead from './components/TableHead';\r\nimport TableResize from './components/TableResize';\r\nimport TableToolbar from './components/TableToolbar';\r\nimport TableToolbarSelect from './components/TableToolbarSelect';\r\nimport getTextLabels from './textLabels';\r\nimport { buildMap, getCollatorComparator, sortCompare, getPageValue, warnDeprecated } from './utils';\r\n\r\nconst defaultTableStyles = theme => ({\r\n  root: {},\r\n  paper: {},\r\n  paperResponsiveScrollFullHeightFullWidth: {\r\n    position: 'absolute',\r\n  },\r\n  tableRoot: {\r\n    outline: 'none',\r\n  },\r\n  responsiveScroll: {\r\n    overflowX: 'auto',\r\n    overflow: 'auto',\r\n    height: '100%',\r\n  },\r\n  responsiveScrollMaxHeight: {\r\n    overflowX: 'auto',\r\n    overflow: 'auto',\r\n    height: '100%',\r\n  },\r\n  responsiveScrollFullHeight: {\r\n    height: '100%',\r\n  },\r\n  responsiveStacked: {\r\n    overflowX: 'auto',\r\n    overflow: 'auto',\r\n    [theme.breakpoints.down('sm')]: {\r\n      overflowX: 'hidden',\r\n      overflow: 'hidden',\r\n    },\r\n  },\r\n  responsiveStackedFullWidth: {},\r\n  caption: {\r\n    position: 'absolute',\r\n    left: '-3000px',\r\n  },\r\n  liveAnnounce: {\r\n    border: '0',\r\n    clip: 'rect(0 0 0 0)',\r\n    height: '1px',\r\n    margin: '-1px',\r\n    overflow: 'hidden',\r\n    padding: '0',\r\n    position: 'absolute',\r\n    width: '1px',\r\n  },\r\n  '@global': {\r\n    '@media print': {\r\n      '.datatables-noprint': {\r\n        display: 'none',\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst TABLE_LOAD = {\r\n  INITIAL: 1,\r\n  UPDATE: 2,\r\n};\r\n\r\n// Populate this list with anything that might render in the toolbar to determine if we hide the toolbar\r\nconst TOOLBAR_ITEMS = ['title', 'filter', 'search', 'print', 'download', 'viewColumns', 'customToolbar'];\r\n\r\nconst hasToolbarItem = (options, title) => {\r\n  options.title = title;\r\n\r\n  return !isUndefined(find(TOOLBAR_ITEMS, i => options[i]));\r\n};\r\n\r\nclass MUIDataTable extends React.Component {\r\n  static propTypes = {\r\n    /** Title of the table */\r\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\r\n    /** Data used to describe table */\r\n    data: PropTypes.array.isRequired,\r\n    /** Columns used to describe table */\r\n    columns: PropTypes.PropTypes.arrayOf(\r\n      PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.shape({\r\n          label: PropTypes.string,\r\n          name: PropTypes.string.isRequired,\r\n          options: PropTypes.shape({\r\n            display: PropTypes.oneOf(['true', 'false', 'excluded']),\r\n            empty: PropTypes.bool,\r\n            filter: PropTypes.bool,\r\n            sort: PropTypes.bool,\r\n            print: PropTypes.bool,\r\n            searchable: PropTypes.bool,\r\n            download: PropTypes.bool,\r\n            viewColumns: PropTypes.bool,\r\n            filterList: PropTypes.array,\r\n            sortDirection: PropTypes.oneOf(['asc', 'desc', 'none']),\r\n            filterOptions: PropTypes.oneOfType([\r\n              PropTypes.array,\r\n              PropTypes.shape({\r\n                names: PropTypes.array,\r\n                logic: PropTypes.func,\r\n                display: PropTypes.func,\r\n              }),\r\n            ]),\r\n            filterType: PropTypes.oneOf(['dropdown', 'checkbox', 'multiselect', 'textField', 'custom']),\r\n            customHeadRender: PropTypes.func,\r\n            customBodyRender: PropTypes.func,\r\n            customFilterListOptions: PropTypes.oneOfType([\r\n              PropTypes.shape({\r\n                render: PropTypes.func,\r\n                update: PropTypes.func,\r\n              }),\r\n            ]),\r\n            customFilterListRender: PropTypes.func,\r\n            setCellProps: PropTypes.func,\r\n            setCellHeaderProps: PropTypes.func,\r\n          }),\r\n        }),\r\n      ]),\r\n    ).isRequired,\r\n    /** Options used to describe table */\r\n    options: PropTypes.shape({\r\n      responsive: PropTypes.oneOf([\r\n        'stacked',\r\n        'stackedFullWidth',\r\n        'scrollMaxHeight',\r\n        'scrollFullHeight',\r\n        'scrollFullHeightFullWidth',\r\n      ]),\r\n      filterType: PropTypes.oneOf(['dropdown', 'checkbox', 'multiselect', 'textField', 'custom']),\r\n      getTextLabels: PropTypes.func,\r\n      pagination: PropTypes.bool,\r\n      expandableRows: PropTypes.bool,\r\n      expandableRowsOnClick: PropTypes.bool,\r\n      renderExpandableRow: PropTypes.func,\r\n      customToolbar: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\r\n      customToolbarSelect: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\r\n      customFooter: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\r\n      customSearchRender: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\r\n      customRowRender: PropTypes.func,\r\n      customFilterDialogFooter: PropTypes.func,\r\n      onRowClick: PropTypes.func,\r\n      onRowsExpand: PropTypes.func,\r\n      onRowsSelect: PropTypes.func,\r\n      resizableColumns: PropTypes.bool,\r\n      selectableRows: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['none', 'single', 'multiple'])]),\r\n      selectableRowsOnClick: PropTypes.bool,\r\n      isRowSelectable: PropTypes.func,\r\n      disableToolbarSelect: PropTypes.bool,\r\n      isRowExpandable: PropTypes.func,\r\n      selectableRowsHeader: PropTypes.bool,\r\n      serverSide: PropTypes.bool,\r\n      onFilterChange: PropTypes.func,\r\n      onFilterDialogOpen: PropTypes.func,\r\n      onFilterDialogClose: PropTypes.func,\r\n      onTableChange: PropTypes.func,\r\n      onTableInit: PropTypes.func,\r\n      caseSensitive: PropTypes.bool,\r\n      rowHover: PropTypes.bool,\r\n      fixedHeader: PropTypes.bool,\r\n      fixedHeaderOptions: PropTypes.shape({\r\n        xAxis: PropTypes.bool,\r\n        yAxis: PropTypes.bool,\r\n      }),\r\n      page: PropTypes.number,\r\n      count: PropTypes.number,\r\n      rowsSelected: PropTypes.array,\r\n      rowsExpanded: PropTypes.array,\r\n      rowsPerPage: PropTypes.number,\r\n      rowsPerPageOptions: PropTypes.array,\r\n      filter: PropTypes.bool,\r\n      sort: PropTypes.bool,\r\n      customSort: PropTypes.func,\r\n      customSearch: PropTypes.func,\r\n      search: PropTypes.bool,\r\n      searchOpen: PropTypes.bool,\r\n      searchText: PropTypes.string,\r\n      searchPlaceholder: PropTypes.string,\r\n      print: PropTypes.bool,\r\n      viewColumns: PropTypes.bool,\r\n      download: PropTypes.bool,\r\n      downloadOptions: PropTypes.shape({\r\n        filename: PropTypes.string,\r\n        separator: PropTypes.string,\r\n        filterOptions: PropTypes.shape({\r\n          useDisplayedColumnsOnly: PropTypes.bool,\r\n          useDisplayedRowsOnly: PropTypes.bool,\r\n        }),\r\n      }),\r\n      onDownload: PropTypes.func,\r\n      setTableProps: PropTypes.func,\r\n      setRowProps: PropTypes.func,\r\n    }),\r\n    /** Pass and use className to style MUIDataTable as desired */\r\n    className: PropTypes.string,\r\n  };\r\n\r\n  static defaultProps = {\r\n    title: '',\r\n    options: {},\r\n    data: [],\r\n    columns: [],\r\n  };\r\n\r\n  state = {\r\n    announceText: null,\r\n    activeColumn: null,\r\n    data: [],\r\n    displayData: [],\r\n    page: 0,\r\n    rowsPerPage: 0,\r\n    count: 0,\r\n    columns: [],\r\n    filterData: [],\r\n    filterList: [],\r\n    selectedRows: {\r\n      data: [],\r\n      lookup: {},\r\n    },\r\n    previousSelectedRow: null,\r\n    expandedRows: {\r\n      data: [],\r\n      lookup: {},\r\n    },\r\n    showResponsive: false,\r\n    searchText: null,\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.tableRef = false;\r\n    this.tableContent = React.createRef();\r\n    this.headCellRefs = {};\r\n    this.setHeadResizeable = () => {};\r\n    this.updateDividers = () => {};\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    this.initializeTable(this.props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setHeadResizeable(this.headCellRefs, this.tableRef);\r\n\r\n    // When we have a search, we must reset page to view it unless on serverSide since paging is handled by the user.\r\n    if (this.props.options.searchText && !this.props.options.serverSide) this.setState({ page: 0 });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.data !== prevProps.data || this.props.columns !== prevProps.columns) {\r\n      this.updateOptions(this.options, this.props);\r\n      this.setTableData(this.props, TABLE_LOAD.INITIAL, () => {\r\n        this.setTableAction('propsUpdate');\r\n      });\r\n    }\r\n\r\n    if (this.props.options.searchText !== prevProps.options.searchText && !this.props.options.serverSide) {\r\n      // When we have a search, we must reset page to view it unless on serverSide since paging is handled by the user.\r\n      this.setState({ page: 0 });\r\n    }\r\n\r\n    if (this.options.resizableColumns) {\r\n      this.setHeadResizeable(this.headCellRefs, this.tableRef);\r\n      this.updateDividers();\r\n    }\r\n  }\r\n\r\n  updateOptions(options, props) {\r\n    this.options = assignwith(options, props.options, (objValue, srcValue, key) => {\r\n      // Merge any default options that are objects, as they will be overwritten otherwise\r\n      if (key === 'textLabels' || key === 'downloadOptions') return merge(objValue, srcValue);\r\n      return;\r\n    });\r\n\r\n    this.handleOptionDeprecation();\r\n  }\r\n\r\n  initializeTable(props) {\r\n    this.mergeDefaultOptions(props);\r\n    this.setTableOptions();\r\n    this.setTableData(props, TABLE_LOAD.INITIAL, () => {\r\n      this.setTableInit('tableInitialized');\r\n    });\r\n  }\r\n\r\n  getDefaultOptions = () => ({\r\n    responsive: 'stacked',\r\n    filterType: 'dropdown',\r\n    pagination: true,\r\n    textLabels: getTextLabels(),\r\n    serverSideFilterList: [],\r\n    expandableRows: false,\r\n    expandableRowsOnClick: false,\r\n    resizableColumns: false,\r\n    selectableRows: 'multiple',\r\n    selectableRowsOnClick: false,\r\n    selectableRowsHeader: true,\r\n    caseSensitive: false,\r\n    disableToolbarSelect: false,\r\n    serverSide: false,\r\n    rowHover: true,\r\n    elevation: 4,\r\n    rowsPerPage: 10,\r\n    rowsPerPageOptions: [10, 15, 100],\r\n    filter: true,\r\n    fixedHeaderOptions: {\r\n      xAxis: true,\r\n      yAxis: true,\r\n    },\r\n    sortFilterList: true,\r\n    sort: true,\r\n    search: true,\r\n    print: true,\r\n    viewColumns: true,\r\n    download: true,\r\n    downloadOptions: {\r\n      filename: 'tableDownload.csv',\r\n      separator: ',',\r\n    },\r\n    setTableProps: () => ({}),\r\n  });\r\n\r\n  handleOptionDeprecation = () => {\r\n    if (typeof this.options.selectableRows === 'boolean') {\r\n      warnDeprecated(\r\n        'Using a boolean for selectableRows has been deprecated. Please use string option: multiple | single | none',\r\n      );\r\n      this.options.selectableRows = this.options.selectableRows ? 'multiple' : 'none';\r\n    }\r\n    if (\r\n      ['scrollMaxHeight', 'scrollFullHeight', 'stacked', 'stackedFullWidth', 'scrollFullHeightFullWidth'].indexOf(\r\n        this.options.responsive,\r\n      ) === -1\r\n    ) {\r\n      warnDeprecated(\r\n        'Invalid option value for responsive. Please use string option: scrollMaxHeight | scrollFullHeight | stacked | stackedFullWidth | scrollFullHeightFullWidth',\r\n      );\r\n    }\r\n    if (this.options.responsive === 'scroll') {\r\n      warnDeprecated('This option has been replaced by scrollMaxHeight');\r\n    }\r\n    if (this.options.fixedHeader === false || this.options.fixedHeader) {\r\n      warnDeprecated(\r\n        'fixedHeader has been deprecated in favor of fixedHeaderOptions: { xAxis: boolean, yAxis: boolean }. Once removed, the new options will be set by default to render like the old fixedHeader. However, if you are setting the fixedHeader value manually, it will no longer work in the next major version.',\r\n      );\r\n    }\r\n\r\n    this.props.columns.map(c => {\r\n      if (c.options && c.options.customFilterListRender) {\r\n        warnDeprecated(\r\n          'The customFilterListRender option has been deprecated. It is being replaced by customFilterListOptions.render (Specify customFilterListOptions: { render: Function } in column options.)',\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  /*\r\n   * React currently does not support deep merge for defaultProps. Objects are overwritten\r\n   */\r\n  mergeDefaultOptions(props) {\r\n    const defaultOptions = this.getDefaultOptions();\r\n\r\n    this.updateOptions(defaultOptions, this.props);\r\n  }\r\n\r\n  validateOptions(options) {\r\n    if (options.serverSide && options.onTableChange === undefined) {\r\n      throw Error('onTableChange callback must be provided when using serverSide option');\r\n    }\r\n    if (options.expandableRows && options.renderExpandableRow === undefined) {\r\n      throw Error('renderExpandableRow must be provided when using expandableRows option');\r\n    }\r\n    if (this.props.options.filterList) {\r\n      warnDeprecated(\r\n        'filterList must now be provided under each column option. see https://github.com/gregnb/mui-datatables/tree/master/examples/column-filters example',\r\n      );\r\n    }\r\n  }\r\n\r\n  setTableAction = action => {\r\n    if (typeof this.options.onTableChange === 'function') {\r\n      this.options.onTableChange(action, this.state);\r\n    }\r\n  };\r\n\r\n  setTableInit = action => {\r\n    if (typeof this.options.onTableInit === 'function') {\r\n      this.options.onTableInit(action, this.state);\r\n    }\r\n  };\r\n\r\n  setTableOptions() {\r\n    const optionNames = ['rowsPerPage', 'page', 'rowsSelected', 'rowsPerPageOptions'];\r\n    const optState = optionNames.reduce((acc, cur) => {\r\n      if (this.options[cur] !== undefined) {\r\n        acc[cur] = this.options[cur];\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    this.validateOptions(optState);\r\n    this.setState(optState);\r\n  }\r\n\r\n  setHeadCellRef = (index, el) => {\r\n    this.headCellRefs[index] = el;\r\n  };\r\n\r\n  // must be arrow function on local field to refer to the correct instance when passed around\r\n  // assigning it as arrow function in the JSX would cause hard to track re-render errors\r\n  getTableContentRef = () => this.tableContent.current;\r\n\r\n  /*\r\n   *  Build the source table data\r\n   */\r\n\r\n  buildColumns = newColumns => {\r\n    let columnData = [];\r\n    let filterData = [];\r\n    let filterList = [];\r\n    let sortDirectionSet = false;\r\n\r\n    newColumns.forEach((column, colIndex) => {\r\n      let columnOptions = {\r\n        display: 'true',\r\n        empty: false,\r\n        filter: true,\r\n        sort: true,\r\n        print: true,\r\n        searchable: true,\r\n        download: true,\r\n        viewColumns: true,\r\n        sortDirection: 'none',\r\n      };\r\n\r\n      if (typeof column === 'object') {\r\n        const options = { ...column.options };\r\n        if (options) {\r\n          if (options.display !== undefined) {\r\n            options.display = options.display.toString();\r\n          }\r\n\r\n          if (options.sortDirection === null) {\r\n            warnDeprecated(\r\n              'The \"null\" option for sortDirection is deprecated. sortDirection is an enum, use \"asc\" | \"desc\" | \"none\"',\r\n            );\r\n            options.sortDirection = 'none';\r\n          }\r\n\r\n          if (options.sortDirection !== undefined && options.sortDirection !== 'none') {\r\n            if (sortDirectionSet) {\r\n              console.error('sortDirection is set for more than one column. Only the first column will be considered.');\r\n              options.sortDirection = 'none';\r\n            } else {\r\n              sortDirectionSet = true;\r\n            }\r\n          }\r\n        }\r\n\r\n        columnOptions = {\r\n          name: column.name,\r\n          label: column.label ? column.label : column.name,\r\n          ...columnOptions,\r\n          ...options,\r\n        };\r\n      } else {\r\n        columnOptions = { ...columnOptions, name: column, label: column };\r\n      }\r\n\r\n      columnData.push(columnOptions);\r\n\r\n      filterData[colIndex] = [];\r\n      filterList[colIndex] = [];\r\n    });\r\n\r\n    return { columns: columnData, filterData, filterList };\r\n  };\r\n\r\n  transformData = (columns, data) => {\r\n    const leaf = (obj, path) => path.split('.').reduce((value, el) => (value ? value[el] : undefined), obj);\r\n\r\n    const transformedData = Array.isArray(data[0])\r\n      ? data.map(row => {\r\n          let i = -1;\r\n\r\n          return columns.map(col => {\r\n            if (!col.empty) i++;\r\n            return col.empty ? undefined : row[i];\r\n          });\r\n        })\r\n      : data.map(row => columns.map(col => leaf(row, col.name)));\r\n\r\n    // We need to determine if object data exists in the transformed structure, as this is currently not allowed and will cause errors if not handled by a custom renderer\r\n    const hasInvalidData =\r\n      transformedData.filter(\r\n        data => data.filter(d => typeof d === 'object' && d !== null && !Array.isArray(d)).length > 0,\r\n      ).length > 0;\r\n    if (hasInvalidData)\r\n      warnDeprecated(\r\n        'Passing objects in as data is not supported, and will be prevented in a future release. Consider using ids in your data and linking it to external objects if you want to access object data from custom render functions.',\r\n      );\r\n\r\n    return transformedData;\r\n  };\r\n\r\n  setTableData(props, status, callback = () => {}) {\r\n    let tableData = [];\r\n    let { columns, filterData, filterList } = this.buildColumns(props.columns);\r\n    let sortIndex = null;\r\n    let sortDirection = 'none';\r\n    let tableMeta;\r\n\r\n    const data = status === TABLE_LOAD.INITIAL ? this.transformData(columns, props.data) : props.data;\r\n    const searchText = status === TABLE_LOAD.INITIAL ? this.options.searchText : null;\r\n\r\n    columns.forEach((column, colIndex) => {\r\n      for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\r\n        let value = status === TABLE_LOAD.INITIAL ? data[rowIndex][colIndex] : data[rowIndex].data[colIndex];\r\n\r\n        if (typeof tableData[rowIndex] === 'undefined') {\r\n          tableData.push({\r\n            index: status === TABLE_LOAD.INITIAL ? rowIndex : data[rowIndex].index,\r\n            data: status === TABLE_LOAD.INITIAL ? data[rowIndex] : data[rowIndex].data,\r\n          });\r\n        }\r\n\r\n        // if (typeof column.customBodyRender === 'function') {\r\n        //   const rowData = tableData[rowIndex].data;\r\n        //   tableMeta = this.getTableMeta(rowIndex, colIndex, rowData, column, data, this.state);\r\n        //   const funcResult = column.customBodyRender(value, tableMeta);\r\n\r\n        //   if (React.isValidElement(funcResult) && funcResult.props.value) {\r\n        //     value = funcResult.props.value;\r\n        //   } else if (typeof funcResult === 'string') {\r\n        //     value = funcResult;\r\n        //   }\r\n        // }\r\n\r\n        // if (filterData[colIndex].indexOf(value) < 0 && !Array.isArray(value)) {\r\n        //   filterData[colIndex].push(value);\r\n        // } else if (Array.isArray(value)) {\r\n        //   value.forEach(element => {\r\n        //     if (filterData[colIndex].indexOf(element) < 0) {\r\n        //       filterData[colIndex].push(element);\r\n        //     }\r\n        //   });\r\n        // }\r\n      }\r\n\r\n      if (column.filterOptions) {\r\n        if (Array.isArray(column.filterOptions)) {\r\n          filterData[colIndex] = cloneDeep(column.filterOptions);\r\n          warnDeprecated(\r\n            'filterOptions must now be an object. see https://github.com/gregnb/mui-datatables/tree/master/examples/customize-filter example',\r\n          );\r\n        } else if (Array.isArray(column.filterOptions.names)) {\r\n          filterData[colIndex] = cloneDeep(column.filterOptions.names);\r\n        }\r\n      }\r\n\r\n      if (column.filterList) {\r\n        filterList[colIndex] = cloneDeep(column.filterList);\r\n      }\r\n\r\n      if (this.options.sortFilterList) {\r\n        const comparator = getCollatorComparator();\r\n        filterData[colIndex].sort(comparator);\r\n      }\r\n\r\n      if (column.sortDirection !== 'none') {\r\n        sortIndex = colIndex;\r\n        sortDirection = column.sortDirection;\r\n      }\r\n    });\r\n\r\n    let selectedRowsData = {\r\n      data: [],\r\n      lookup: {},\r\n    };\r\n\r\n    let expandedRowsData = {\r\n      data: [],\r\n      lookup: {},\r\n    };\r\n\r\n    if (TABLE_LOAD.INITIAL) {\r\n      // Multiple row selection customization\r\n      if (this.options.rowsSelected && this.options.rowsSelected.length && this.options.selectableRows === 'multiple') {\r\n        this.options.rowsSelected.forEach(row => {\r\n          let rowPos = row;\r\n\r\n          for (let cIndex = 0; cIndex < this.state.displayData.length; cIndex++) {\r\n            if (this.state.displayData[cIndex].dataIndex === row) {\r\n              rowPos = cIndex;\r\n              break;\r\n            }\r\n          }\r\n\r\n          selectedRowsData.data.push({ index: rowPos, dataIndex: row });\r\n          selectedRowsData.lookup[row] = true;\r\n        });\r\n      }\r\n\r\n      // Single row selection customization\r\n      if (\r\n        this.options.rowsSelected &&\r\n        this.options.rowsSelected.length === 1 &&\r\n        this.options.selectableRows === 'single'\r\n      ) {\r\n        let rowPos = this.options.rowsSelected[0];\r\n\r\n        for (let cIndex = 0; cIndex < this.state.displayData.length; cIndex++) {\r\n          if (this.state.displayData[cIndex].dataIndex === this.options.rowsSelected[0]) {\r\n            rowPos = cIndex;\r\n            break;\r\n          }\r\n        }\r\n\r\n        selectedRowsData.data.push({ index: rowPos, dataIndex: this.options.rowsSelected[0] });\r\n        selectedRowsData.lookup[this.options.rowsSelected[0]] = true;\r\n      } else if (\r\n        this.options.rowsSelected &&\r\n        this.options.rowsSelected.length > 1 &&\r\n        this.options.selectableRows === 'single'\r\n      ) {\r\n        console.error(\r\n          'Multiple values provided for selectableRows, but selectableRows set to \"single\". Either supply only a single value or use \"multiple\".',\r\n        );\r\n      }\r\n\r\n      if (this.options.rowsExpanded && this.options.rowsExpanded.length && this.options.expandableRows) {\r\n        this.options.rowsExpanded.forEach(row => {\r\n          let rowPos = row;\r\n\r\n          for (let cIndex = 0; cIndex < this.state.displayData.length; cIndex++) {\r\n            if (this.state.displayData[cIndex].dataIndex === row) {\r\n              rowPos = cIndex;\r\n              break;\r\n            }\r\n          }\r\n\r\n          expandedRowsData.data.push({ index: rowPos, dataIndex: row });\r\n          expandedRowsData.lookup[row] = true;\r\n        });\r\n      }\r\n    }\r\n\r\n    if (!this.options.serverSide && sortIndex !== null) {\r\n      const sortedData = this.sortTable(tableData, sortIndex, sortDirection);\r\n      tableData = sortedData.data;\r\n    }\r\n\r\n    /* set source data and display Data set source set */\r\n    this.setState(\r\n      {\r\n        columns: columns,\r\n        filterData: filterData,\r\n        filterList: filterList,\r\n        searchText: searchText,\r\n        selectedRows: selectedRowsData,\r\n        expandedRows: expandedRowsData,\r\n        count: this.options.count,\r\n        data: tableData,\r\n        displayData: this.getDisplayData(columns, tableData, filterList, searchText, tableMeta),\r\n        previousSelectedRow: null,\r\n      },\r\n      callback,\r\n    );\r\n  }\r\n\r\n  /*\r\n   *  Build the table data used to display to the user (ie: after filter/search applied)\r\n   */\r\n  computeDisplayRow(columns, row, rowIndex, filterList, searchText, dataForTableMeta, options) {\r\n    let isFiltered = false;\r\n    let isSearchFound = false;\r\n    let displayRow = [];\r\n\r\n    for (let index = 0; index < row.length; index++) {\r\n      let columnDisplay = row[index];\r\n      let columnValue = row[index];\r\n      let column = columns[index];\r\n\r\n      if (column.customBodyRender) {\r\n        const tableMeta = this.getTableMeta(rowIndex, index, row, column, dataForTableMeta, {\r\n          ...this.state,\r\n          filterList: filterList,\r\n          searchText: searchText,\r\n        });\r\n\r\n        const funcResult = column.customBodyRender(\r\n          columnValue,\r\n          tableMeta,\r\n          this.updateDataCol.bind(null, rowIndex, index),\r\n        );\r\n        columnDisplay = funcResult;\r\n\r\n        /* drill down to get the value of a cell */\r\n        columnValue =\r\n          typeof funcResult === 'string' || !funcResult\r\n            ? funcResult\r\n            : funcResult.props && funcResult.props.value\r\n            ? funcResult.props.value\r\n            : columnValue;\r\n      }\r\n\r\n      displayRow.push(columnDisplay);\r\n\r\n      const columnVal = columnValue === null || columnValue === undefined ? '' : columnValue.toString();\r\n\r\n      const filterVal = filterList[index];\r\n      const caseSensitive = options.caseSensitive;\r\n      const filterType = column.filterType || options.filterType;\r\n      if (filterVal.length || filterType === 'custom') {\r\n        if (column.filterOptions && column.filterOptions.logic) {\r\n          if (column.filterOptions.logic(columnValue, filterVal)) isFiltered = true;\r\n        } else if (filterType === 'textField' && !this.hasSearchText(columnVal, filterVal, caseSensitive)) {\r\n          isFiltered = true;\r\n        } else if (\r\n          filterType !== 'textField' &&\r\n          Array.isArray(columnValue) === false &&\r\n          filterVal.indexOf(columnValue) < 0\r\n        ) {\r\n          isFiltered = true;\r\n        } else if (filterType !== 'textField' && Array.isArray(columnValue)) {\r\n          //true if every filterVal exists in columnVal, false otherwise\r\n          const isFullMatch = filterVal.every(el => {\r\n            return columnValue.indexOf(el) >= 0;\r\n          });\r\n          //if it is not a fullMatch, filter row out\r\n          if (!isFullMatch) {\r\n            isFiltered = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (\r\n        searchText &&\r\n        this.hasSearchText(columnVal, searchText, caseSensitive) &&\r\n        column.display !== 'false' &&\r\n        column.searchable\r\n      ) {\r\n        isSearchFound = true;\r\n      }\r\n    }\r\n\r\n    const { customSearch } = this.props.options;\r\n\r\n    if (searchText && customSearch) {\r\n      const customSearchResult = customSearch(searchText, row, columns);\r\n      if (typeof customSearchResult !== 'boolean') {\r\n        console.error('customSearch must return a boolean');\r\n      } else {\r\n        isSearchFound = customSearchResult;\r\n      }\r\n    }\r\n\r\n    if (options.serverSide) {\r\n      if (customSearch) {\r\n        console.warn('Server-side filtering is enabled, hence custom search will be ignored.');\r\n      }\r\n\r\n      return displayRow;\r\n    }\r\n\r\n    if (isFiltered || (searchText && !isSearchFound)) return null;\r\n    else return displayRow;\r\n  }\r\n\r\n  hasSearchText = (toSearch, toFind, caseSensitive) => {\r\n    let stack = toSearch.toString();\r\n    let needle = toFind.toString();\r\n\r\n    if (!caseSensitive) {\r\n      needle = needle.toLowerCase();\r\n      stack = stack.toLowerCase();\r\n    }\r\n\r\n    return stack.indexOf(needle) >= 0;\r\n  };\r\n\r\n  updateDataCol = (row, index, value) => {\r\n    this.setState(prevState => {\r\n      let changedData = cloneDeep(prevState.data);\r\n      let filterData = cloneDeep(prevState.filterData);\r\n\r\n      const tableMeta = this.getTableMeta(row, index, row, prevState.columns[index], prevState.data, prevState);\r\n      const funcResult = prevState.columns[index].customBodyRender(value, tableMeta);\r\n\r\n      const filterValue =\r\n        React.isValidElement(funcResult) && funcResult.props.value\r\n          ? funcResult.props.value\r\n          : prevState['data'][row][index];\r\n\r\n      const prevFilterIndex = filterData[index].indexOf(filterValue);\r\n      filterData[index].splice(prevFilterIndex, 1, filterValue);\r\n\r\n      changedData[row].data[index] = value;\r\n\r\n      if (this.options.sortFilterList) {\r\n        const comparator = getCollatorComparator();\r\n        filterData[index].sort(comparator);\r\n      }\r\n\r\n      return {\r\n        data: changedData,\r\n        filterData: filterData,\r\n        displayData: this.getDisplayData(prevState.columns, changedData, prevState.filterList, prevState.searchText),\r\n      };\r\n    });\r\n  };\r\n\r\n  getTableMeta = (rowIndex, colIndex, rowData, columnData, tableData, curState) => {\r\n    const { columns, data, displayData, filterData, ...tableState } = curState;\r\n\r\n    return {\r\n      rowIndex: rowIndex,\r\n      columnIndex: colIndex,\r\n      columnData: columnData,\r\n      rowData: rowData,\r\n      tableData: tableData,\r\n      tableState: tableState,\r\n    };\r\n  };\r\n\r\n  getDisplayData(columns, data, filterList, searchText, tableMeta) {\r\n    let newRows = [];\r\n    const dataForTableMeta = tableMeta ? tableMeta.tableData : this.props.data;\r\n\r\n    for (let index = 0; index < data.length; index++) {\r\n      const value = data[index].data;\r\n      const displayRow = this.computeDisplayRow(\r\n        columns,\r\n        value,\r\n        index,\r\n        filterList,\r\n        searchText,\r\n        dataForTableMeta,\r\n        this.options,\r\n      );\r\n\r\n      if (displayRow) {\r\n        newRows.push({\r\n          data: displayRow,\r\n          dataIndex: data[index].index,\r\n        });\r\n      }\r\n    }\r\n    return newRows;\r\n  }\r\n\r\n  toggleViewColumn = index => {\r\n    this.setState(\r\n      prevState => {\r\n        const columns = cloneDeep(prevState.columns);\r\n        columns[index].display = columns[index].display === 'true' ? 'false' : 'true';\r\n        return {\r\n          columns: columns,\r\n        };\r\n      },\r\n      () => {\r\n        this.setTableAction('columnViewChange');\r\n        if (this.options.onColumnViewChange) {\r\n          this.options.onColumnViewChange(\r\n            this.state.columns[index].name,\r\n            this.state.columns[index].display === 'true' ? 'add' : 'remove',\r\n          );\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  getSortDirection(column) {\r\n    return column.sortDirection === 'asc' ? 'ascending' : 'descending';\r\n  }\r\n\r\n  getTableProps() {\r\n    const { classes } = this.props;\r\n    const tableProps = this.options.setTableProps();\r\n\r\n    tableProps.className = classnames(classes.tableRoot, tableProps.className);\r\n\r\n    return tableProps;\r\n  }\r\n\r\n  toggleSortColumn = index => {\r\n    this.setState(\r\n      prevState => {\r\n        let columns = cloneDeep(prevState.columns);\r\n        let data = prevState.data;\r\n        const newOrder = columns[index].sortDirection === 'desc' ? 'asc' : 'desc';\r\n\r\n        for (let pos = 0; pos < columns.length; pos++) {\r\n          if (index !== pos) {\r\n            columns[pos].sortDirection = 'none';\r\n          } else {\r\n            columns[pos].sortDirection = newOrder;\r\n          }\r\n        }\r\n\r\n        const orderLabel = this.getSortDirection(columns[index]);\r\n        const announceText = `Table now sorted by ${columns[index].name} : ${orderLabel}`;\r\n\r\n        let newState = {\r\n          columns: columns,\r\n          announceText: announceText,\r\n          activeColumn: index,\r\n        };\r\n\r\n        if (this.options.serverSide) {\r\n          newState = {\r\n            ...newState,\r\n            data: prevState.data,\r\n            displayData: prevState.displayData,\r\n            selectedRows: prevState.selectedRows,\r\n          };\r\n        } else {\r\n          const sortedData = this.sortTable(data, index, newOrder);\r\n\r\n          newState = {\r\n            ...newState,\r\n            data: sortedData.data,\r\n            displayData: this.getDisplayData(columns, sortedData.data, prevState.filterList, prevState.searchText),\r\n            selectedRows: sortedData.selectedRows,\r\n            previousSelectedRow: null,\r\n          };\r\n        }\r\n\r\n        return newState;\r\n      },\r\n      () => {\r\n        this.setTableAction('sort');\r\n        if (this.options.onColumnSortChange) {\r\n          this.options.onColumnSortChange(\r\n            this.state.columns[index].name,\r\n            this.getSortDirection(this.state.columns[index]),\r\n          );\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  changeRowsPerPage = rows => {\r\n    const rowCount = this.options.count || this.state.displayData.length;\r\n\r\n    this.setState(\r\n      () => ({\r\n        rowsPerPage: rows,\r\n        page: getPageValue(rowCount, rows, this.state.page),\r\n      }),\r\n      () => {\r\n        this.setTableAction('changeRowsPerPage');\r\n\r\n        if (this.options.onChangeRowsPerPage) {\r\n          this.options.onChangeRowsPerPage(this.state.rowsPerPage);\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  changePage = page => {\r\n    this.setState(\r\n      () => ({\r\n        page: page,\r\n      }),\r\n      () => {\r\n        this.setTableAction('changePage');\r\n        if (this.options.onChangePage) {\r\n          this.options.onChangePage(this.state.page);\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  searchClose = () => {\r\n    this.setState(\r\n      prevState => ({\r\n        searchText: null,\r\n        displayData: this.options.serverSide\r\n          ? prevState.displayData\r\n          : this.getDisplayData(prevState.columns, prevState.data, prevState.filterList, null),\r\n      }),\r\n      () => {\r\n        this.setTableAction('search');\r\n        if (this.options.onSearchChange) {\r\n          this.options.onSearchChange(this.state.searchText);\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  searchTextUpdate = text => {\r\n    this.setState(\r\n      prevState => ({\r\n        searchText: text && text.length ? text : null,\r\n        page: 0,\r\n        displayData: this.options.serverSide\r\n          ? prevState.displayData\r\n          : this.getDisplayData(prevState.columns, prevState.data, prevState.filterList, text),\r\n      }),\r\n      () => {\r\n        this.setTableAction('search');\r\n        if (this.options.onSearchChange) {\r\n          this.options.onSearchChange(this.state.searchText);\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  resetFilters = () => {\r\n    this.setState(\r\n      prevState => {\r\n        const filterList = prevState.columns.map(() => []);\r\n\r\n        return {\r\n          filterList: filterList,\r\n          displayData: this.options.serverSide\r\n            ? prevState.displayData\r\n            : this.getDisplayData(prevState.columns, prevState.data, filterList, prevState.searchText),\r\n        };\r\n      },\r\n      () => {\r\n        this.setTableAction('resetFilters');\r\n        if (this.options.onFilterChange) {\r\n          this.options.onFilterChange(null, this.state.filterList, 'reset');\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  filterUpdate = (index, value, column, type, customUpdate) => {\r\n    this.setState(\r\n      prevState => {\r\n        let filterList = prevState.filterList.slice(0);\r\n        const filterPos = filterList[index].indexOf(value);\r\n\r\n        switch (type) {\r\n          case 'checkbox':\r\n            filterPos >= 0 ? filterList[index].splice(filterPos, 1) : filterList[index].push(value);\r\n            break;\r\n          case 'chip':\r\n            filterPos >= 0 ? filterList[index].splice(filterPos, 1) : filterList[index].push(value);\r\n            break;\r\n          case 'multiselect':\r\n            filterList[index] = value === '' ? [] : value;\r\n            break;\r\n          case 'dropdown':\r\n            filterList[index] = value;\r\n            break;\r\n          case 'custom':\r\n            if (customUpdate) filterList = customUpdate(filterList, filterPos, index);\r\n            else filterList[index] = value;\r\n            break;\r\n          default:\r\n            filterList[index] = filterPos >= 0 || value === '' ? [] : [value];\r\n        }\r\n\r\n        return {\r\n          page: 0,\r\n          filterList: filterList,\r\n          displayData: this.options.serverSide\r\n            ? prevState.displayData\r\n            : this.getDisplayData(prevState.columns, prevState.data, filterList, prevState.searchText),\r\n          previousSelectedRow: null,\r\n        };\r\n      },\r\n      () => {\r\n        this.setTableAction('filterChange');\r\n        if (this.options.onFilterChange) {\r\n          this.options.onFilterChange(column, this.state.filterList, type);\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  selectRowDelete = () => {\r\n    const { selectedRows, data, filterList } = this.state;\r\n\r\n    const selectedMap = buildMap(selectedRows.data);\r\n    const cleanRows = data.filter(({ index }) => !selectedMap[index]);\r\n\r\n    if (this.options.onRowsDelete) {\r\n      if (this.options.onRowsDelete(selectedRows) === false) return;\r\n    }\r\n\r\n    this.setTableData(\r\n      {\r\n        columns: this.props.columns,\r\n        data: cleanRows,\r\n        options: {\r\n          filterList: filterList,\r\n        },\r\n      },\r\n      TABLE_LOAD.UPDATE,\r\n      () => {\r\n        this.setTableAction('rowDelete');\r\n      },\r\n    );\r\n  };\r\n\r\n  toggleExpandRow = row => {\r\n    const { dataIndex } = row;\r\n    const { isRowExpandable } = this.options;\r\n    let { expandedRows } = this.state;\r\n    const expandedRowsData = [...expandedRows.data];\r\n    let shouldCollapseExpandedRow = false;\r\n    let hasRemovedRow = false;\r\n    let removedRow = [];\r\n\r\n    for (var cIndex = 0; cIndex < expandedRowsData.length; cIndex++) {\r\n      if (expandedRowsData[cIndex].dataIndex === dataIndex) {\r\n        shouldCollapseExpandedRow = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (shouldCollapseExpandedRow) {\r\n      if ((isRowExpandable && isRowExpandable(dataIndex, expandedRows)) || !isRowExpandable) {\r\n        removedRow = expandedRowsData.splice(cIndex, 1);\r\n        hasRemovedRow = true;\r\n      }\r\n    } else {\r\n      if (isRowExpandable && isRowExpandable(dataIndex, expandedRows)) expandedRowsData.push(row);\r\n      else if (!isRowExpandable) expandedRowsData.push(row);\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        curExpandedRows: hasRemovedRow ? removedRow : [row],\r\n        expandedRows: {\r\n          lookup: buildMap(expandedRowsData),\r\n          data: expandedRowsData,\r\n        },\r\n      },\r\n      () => {\r\n        this.setTableAction('expandRow');\r\n        if (this.options.onRowsExpand) {\r\n          this.options.onRowsExpand(this.state.curExpandedRows, this.state.expandedRows.data);\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  selectRowUpdate = (type, value, shiftAdjacentRows = []) => {\r\n    // safety check\r\n    const { selectableRows } = this.options;\r\n    if (selectableRows === 'none') {\r\n      return;\r\n    }\r\n\r\n    if (type === 'head') {\r\n      const { isRowSelectable } = this.options;\r\n      this.setState(\r\n        prevState => {\r\n          const { displayData, selectedRows: prevSelectedRows } = prevState;\r\n          const selectedRowsLen = prevState.selectedRows.data.length;\r\n          let isDeselect =\r\n            selectedRowsLen === displayData.length || (selectedRowsLen < displayData.length && selectedRowsLen > 0);\r\n\r\n          let selectedRows = displayData.reduce((arr, d, i) => {\r\n            const selected = isRowSelectable ? isRowSelectable(displayData[i].dataIndex, prevSelectedRows) : true;\r\n            selected && arr.push({ index: i, dataIndex: displayData[i].dataIndex });\r\n            return arr;\r\n          }, []);\r\n\r\n          let newRows = [...prevState.selectedRows, ...selectedRows];\r\n          let selectedMap = buildMap(newRows);\r\n\r\n          // if the select toolbar is disabled, the rules are a little different\r\n          if (this.options.disableToolbarSelect === true) {\r\n            if (selectedRowsLen > displayData.length) {\r\n              isDeselect = true;\r\n            } else {\r\n              for (let ii = 0; ii < displayData.length; ii++) {\r\n                if (!selectedMap[displayData[ii].dataIndex]) {\r\n                  isDeselect = true;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if (isDeselect) {\r\n            newRows = prevState.selectedRows.data.filter(({ dataIndex }) => !selectedMap[dataIndex]);\r\n            selectedMap = buildMap(newRows);\r\n          }\r\n\r\n          return {\r\n            curSelectedRows: newRows,\r\n            selectedRows: {\r\n              data: newRows,\r\n              lookup: selectedMap,\r\n            },\r\n            previousSelectedRow: null,\r\n          };\r\n        },\r\n        () => {\r\n          this.setTableAction('rowsSelect');\r\n          if (this.options.onRowsSelect) {\r\n            this.options.onRowsSelect(this.state.curSelectedRows, this.state.selectedRows.data);\r\n          }\r\n        },\r\n      );\r\n    } else if (type === 'cell') {\r\n      this.setState(\r\n        prevState => {\r\n          const { dataIndex } = value;\r\n          let selectedRows = [...prevState.selectedRows.data];\r\n          let rowPos = -1;\r\n\r\n          for (let cIndex = 0; cIndex < selectedRows.length; cIndex++) {\r\n            if (selectedRows[cIndex].dataIndex === dataIndex) {\r\n              rowPos = cIndex;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (rowPos >= 0) {\r\n            selectedRows.splice(rowPos, 1);\r\n\r\n            // handle rows affected by shift+click\r\n            if (shiftAdjacentRows.length > 0) {\r\n              let shiftAdjacentMap = buildMap(shiftAdjacentRows);\r\n              for (let cIndex = selectedRows.length - 1; cIndex >= 0; cIndex--) {\r\n                if (shiftAdjacentMap[selectedRows[cIndex].dataIndex]) {\r\n                  selectedRows.splice(cIndex, 1);\r\n                }\r\n              }\r\n            }\r\n          } else if (selectableRows === 'single') {\r\n            selectedRows = [value];\r\n          } else {\r\n            // multiple\r\n            selectedRows.push(value);\r\n\r\n            // handle rows affected by shift+click\r\n            if (shiftAdjacentRows.length > 0) {\r\n              let selectedMap = buildMap(selectedRows);\r\n              shiftAdjacentRows.forEach(aRow => {\r\n                if (!selectedMap[aRow.dataIndex]) {\r\n                  selectedRows.push(aRow);\r\n                }\r\n              });\r\n            }\r\n          }\r\n\r\n          return {\r\n            selectedRows: {\r\n              lookup: buildMap(selectedRows),\r\n              data: selectedRows,\r\n            },\r\n            previousSelectedRow: value,\r\n          };\r\n        },\r\n        () => {\r\n          this.setTableAction('rowsSelect');\r\n          if (this.options.onRowsSelect) {\r\n            this.options.onRowsSelect([value], this.state.selectedRows.data);\r\n          }\r\n        },\r\n      );\r\n    } else if (type === 'custom') {\r\n      const { displayData } = this.state;\r\n\r\n      const data = value.map(row => ({ index: row, dataIndex: displayData[row].dataIndex }));\r\n      const lookup = buildMap(data);\r\n\r\n      this.setState(\r\n        {\r\n          selectedRows: { data, lookup },\r\n          previousSelectedRow: null,\r\n        },\r\n        () => {\r\n          this.setTableAction('rowsSelect');\r\n          if (this.options.onRowsSelect) {\r\n            this.options.onRowsSelect(this.state.selectedRows.data, this.state.selectedRows.data);\r\n          }\r\n        },\r\n      );\r\n    }\r\n  };\r\n\r\n  sortTable(data, col, order) {\r\n    let dataSrc = this.options.customSort ? this.options.customSort(data, col, order || 'desc') : data;\r\n\r\n    let sortedData = dataSrc.map((row, sIndex) => ({\r\n      data: row.data[col],\r\n      rowData: row.data,\r\n      position: sIndex,\r\n      rowSelected: this.state.selectedRows.lookup[row.index] ? true : false,\r\n    }));\r\n\r\n    if (!this.options.customSort) {\r\n      sortedData.sort(sortCompare(order));\r\n    }\r\n\r\n    let tableData = [];\r\n    let selectedRows = [];\r\n\r\n    for (let i = 0; i < sortedData.length; i++) {\r\n      const row = sortedData[i];\r\n      tableData.push(dataSrc[row.position]);\r\n      if (row.rowSelected) {\r\n        selectedRows.push({ index: i, dataIndex: dataSrc[row.position].index });\r\n      }\r\n    }\r\n\r\n    return {\r\n      data: tableData,\r\n      selectedRows: {\r\n        lookup: buildMap(selectedRows),\r\n        data: selectedRows,\r\n      },\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { classes, className, title } = this.props;\r\n    const {\r\n      announceText,\r\n      activeColumn,\r\n      data,\r\n      displayData,\r\n      columns,\r\n      page,\r\n      filterData,\r\n      filterList,\r\n      selectedRows,\r\n      previousSelectedRow,\r\n      expandedRows,\r\n      searchText,\r\n      serverSideFilterList,\r\n    } = this.state;\r\n\r\n    const rowCount = this.state.count || displayData.length;\r\n    const rowsPerPage = this.options.pagination ? this.state.rowsPerPage : displayData.length;\r\n    const showToolbar = hasToolbarItem(this.options, title);\r\n    const columnNames = columns.map(column => ({\r\n      name: column.name,\r\n      filterType: column.filterType || this.options.filterType,\r\n    }));\r\n    const responsiveOption = this.options.responsive;\r\n    let paperClasses = `${classes.paper} ${className}`;\r\n    let maxHeight;\r\n    let responsiveClass;\r\n\r\n    switch (responsiveOption) {\r\n      // DEPRECATED: This options is beign transitioned to `responsiveScrollMaxHeight`\r\n      case 'scroll':\r\n        responsiveClass = classes.responsiveScroll;\r\n        maxHeight = '499px';\r\n        break;\r\n      case 'scrollMaxHeight':\r\n        responsiveClass = classes.responsiveScrollMaxHeight;\r\n        maxHeight = '499px';\r\n        break;\r\n      case 'scrollFullHeight':\r\n        responsiveClass = classes.responsiveScrollFullHeight;\r\n        maxHeight = 'none';\r\n        break;\r\n      case 'scrollFullHeightFullWidth':\r\n        responsiveClass = classes.responsiveScrollFullHeight;\r\n        paperClasses = `${classes.paperResponsiveScrollFullHeightFullWidth} ${className}`;\r\n        break;\r\n      case 'stacked':\r\n        responsiveClass = classes.responsiveStacked;\r\n        maxHeight = 'none';\r\n        break;\r\n      case 'stackedFullWidth':\r\n        responsiveClass = classes.responsiveStackedFullWidth;\r\n        paperClasses = `${classes.paperResponsiveScrollFullHeightFullWidth} ${className}`;\r\n        maxHeight = 'none';\r\n        break;\r\n    }\r\n\r\n    let tableProps = this.options.setTableProps ? this.options.setTableProps() : {};\r\n    let tableClassNames = classnames(classes.tableRoot, tableProps.className);\r\n    delete tableProps.className; // remove className from props to avoid the className being applied twice\r\n\r\n    return (\r\n      <Paper elevation={this.options.elevation} ref={this.tableContent} className={paperClasses}>\r\n        {selectedRows.data.length && this.options.disableToolbarSelect !== true ? (\r\n          <TableToolbarSelect\r\n            options={this.options}\r\n            selectedRows={selectedRows}\r\n            onRowsDelete={this.selectRowDelete}\r\n            displayData={displayData}\r\n            selectRowUpdate={this.selectRowUpdate}\r\n          />\r\n        ) : (\r\n          showToolbar && (\r\n            <TableToolbar\r\n              columns={columns}\r\n              displayData={displayData}\r\n              data={data}\r\n              filterData={filterData}\r\n              filterList={filterList}\r\n              filterUpdate={this.filterUpdate}\r\n              options={this.options}\r\n              resetFilters={this.resetFilters}\r\n              searchText={searchText}\r\n              searchTextUpdate={this.searchTextUpdate}\r\n              searchClose={this.searchClose}\r\n              tableRef={this.getTableContentRef}\r\n              title={title}\r\n              toggleViewColumn={this.toggleViewColumn}\r\n              setTableAction={this.setTableAction}\r\n            />\r\n          )\r\n        )}\r\n        <TableFilterList\r\n          options={this.options}\r\n          serverSideFilterList={this.props.options.serverSideFilterList || []}\r\n          filterListRenderers={columns.map(c => {\r\n            if (c.customFilterListOptions && c.customFilterListOptions.render) return c.customFilterListOptions.render;\r\n            // DEPRECATED: This option is being replaced with customFilterListOptions.render\r\n            if (c.customFilterListRender) return c.customFilterListRender;\r\n\r\n            return f => f;\r\n          })}\r\n          customFilterListUpdate={columns.map(c => {\r\n            return c.customFilterListOptions && c.customFilterListOptions.update\r\n              ? c.customFilterListOptions.update\r\n              : null;\r\n          })}\r\n          filterList={filterList}\r\n          filterUpdate={this.filterUpdate}\r\n          columnNames={columnNames}\r\n        />\r\n        <div style={{ position: 'relative', maxHeight }} className={responsiveClass}>\r\n          {this.options.resizableColumns && (\r\n            <TableResize\r\n              key={rowCount}\r\n              updateDividers={fn => (this.updateDividers = fn)}\r\n              setResizeable={fn => (this.setHeadResizeable = fn)}\r\n            />\r\n          )}\r\n          <MuiTable\r\n            ref={el => (this.tableRef = el)}\r\n            tabIndex={'0'}\r\n            role={'grid'}\r\n            className={tableClassNames}\r\n            {...tableProps}>\r\n            <caption className={classes.caption}>{title}</caption>\r\n            <TableHead\r\n              columns={columns}\r\n              activeColumn={activeColumn}\r\n              data={displayData}\r\n              count={rowCount}\r\n              page={page}\r\n              rowsPerPage={rowsPerPage}\r\n              handleHeadUpdateRef={fn => (this.updateToolbarSelect = fn)}\r\n              selectedRows={selectedRows}\r\n              selectRowUpdate={this.selectRowUpdate}\r\n              toggleSort={this.toggleSortColumn}\r\n              setCellRef={this.setHeadCellRef}\r\n              options={this.options}\r\n            />\r\n            <TableBody\r\n              data={displayData}\r\n              count={rowCount}\r\n              columns={columns}\r\n              page={page}\r\n              rowsPerPage={rowsPerPage}\r\n              selectedRows={selectedRows}\r\n              selectRowUpdate={this.selectRowUpdate}\r\n              previousSelectedRow={previousSelectedRow}\r\n              expandedRows={expandedRows}\r\n              toggleExpandRow={this.toggleExpandRow}\r\n              options={this.options}\r\n              filterList={filterList}\r\n            />\r\n          </MuiTable>\r\n        </div>\r\n        <TableFooter\r\n          options={this.options}\r\n          page={page}\r\n          rowCount={rowCount}\r\n          rowsPerPage={rowsPerPage}\r\n          changeRowsPerPage={this.changeRowsPerPage}\r\n          changePage={this.changePage}\r\n        />\r\n        <div className={classes.liveAnnounce} aria-live={'polite'}>\r\n          {announceText}\r\n        </div>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultTableStyles, { name: 'MUIDataTable' })(MUIDataTable);\r\n"],"names":["defaultBodyCellStyles","theme","breakpoints","down","TableBodyCell","handleClick","_this","props","colIndex","options","children","dataIndex","rowIndex","onCellClick","event","this","classes","columnHeader","className","print","otherProps","React","classNames","root","cellHide","stackedCommon","responsive","cellStackedSmall","setTableProps","padding","size","responsiveStackedSmall","Component","withStyles","name","defaultBodyRowStyles","cursor","TableBodyRow","rowSelected","onClick","rest","rowHover","hover","hoverCursor","selectableRowsOnClick","expandableRowsOnClick","responsiveStacked","defaultSelectCellStyles","palette","background","paper","TableSelectCell","fixedHeader","fixedHeaderOptions","isHeaderCell","expandableOn","selectableOn","isRowExpanded","onExpand","isRowSelectable","selectableRowsHeader","hideExpandButton","fixedHeaderClasses","fixedHeaderCommon","xAxis","fixedHeaderXAxis","yAxis","fixedHeaderYAxis","cellClass","headerCell","buttonClass","expandDisabled","iconClass","icon","hide","expanded","style","display","alignItems","disabled","KeyboardArrowRight","id","Checkbox","checkboxRoot","checked","defaultProps","buildMap","rows","reduce","accum","escapeDangerousCSVCharacters","data","replace","getPageValue","count","rowsPerPage","page","totalPages","Math","ceil","getCollatorComparator","Intl","Collator","undefined","numeric","sensitivity","compare","a","b","localeCompare","sortCompare","order","aData","bData","buildCSV","columns","replaceDoubleQuoteInString","columnData","buildHead","soFar","column","download","label","downloadOptions","separator","slice","CSVHead","buildBody","length","row","filter","_","index","map","join","trim","CSVBody","onDownload","downloadCSV","csv","filename","blob","Blob","type","navigator","msSaveOrOpenBlob","dataURI","URL","window","webkitURL","downloadURI","createObjectURL","link","document","createElement","setAttribute","body","appendChild","click","removeChild","createCSVDownload","defaultBodyStyles","TableBody","handleRowSelect","shiftKey","nativeEvent","shiftAdjacentRows","previousSelectedRow","curIndex","selectedRows","cloneDeep","clickedDataIndex","d","push","lookup","selectRowUpdate","handleRowClick","target","nodeName","parentNode","onRowClick","startsWith","selectableRows","selectRow","expandableRows","isRowExpandable","expandedRows","expandRow","toggleExpandRow","serverSide","highestPageInRange","fromIndex","toIndex","min","warn","tableRows","buildRows","visibleColCnt","c","customRowRender","Fragment","key","setRowProps","_this2","isRowSelected","bind","getRowIndex","columnIndex","setCellProps","renderExpandableRow","variant","emptyTitle","textLabels","noMatch","defaultFilterListStyles","TableFilterList","filterList","filterUpdate","filterListRenderers","columnNames","serverSideFilterList","customFilterListUpdate","customFilterChip","customFilterItem","customFilterItemIndex","item","isArray","filterType","Chip","chip","getFilterList","filterListRenderersValue","Array","filterChip","defaultHeadCellStyles","text","primary","TableHeadCell","handleKeyboardSortinput","e","toggleSort","handleSortClick","sortDirection","sort","hint","cellHeaderProps","sortActive","ariaSortDirection","sortLabelProps","sortLabelRoot","direction","scope","toolButton","columnHeaderTooltip","toolTip","tooltip","mypopper","sortAction","TableSortLabel","title","HelpIcon","hintIconWithSortIcon","hintIconAlone","fontSize","defaultHeadRowStyles","TableHeadRow","defaultHeadStyles","TableHead","handleToggleColumn","handleHeadUpdateRef","handleUpdateCheck","setCellRef","numSelected","isIndeterminate","isChecked","disableToolbarSelect","ii","main","findDOMNode","el","customHeadRender","setCellHeaderProps","defaultPaginationStyles","TablePagination","handleRowChange","changeRowsPerPage","value","handlePageChange","changePage","pagination","MuiTablePagination","caption","toolbar","selectRoot","from","to","displayRows","previous","next","data-testid","rowsPerPageOptions","TableFooter","rowCount","customFooter","defaultResizeStyles","TableResize","state","handleResize","innerWidth","windowWidth","setDividers","setCellRefs","cellsRef","tableRef","getBoundingClientRect","tableWidth","width","tableHeight","height","priorPosition","resizeCoords","Object","entries","forEach","elRect","elStyle","getComputedStyle","left","oldLeft","newLeft","offsetWidth","parseInt","paddingLeft","setState","updateWidths","lastPosition","newWidth","Number","toFixed","thCell","onResizeStart","isResize","startPosition","clientX","onResizeMove","leftPos","curCoord","newResizeCoords","onResizeEnd","setResizeable","updateDividers","updateCoords","addEventListener","removeEventListener","val","_this3","resizer","Popover","anchorEl","open","handleRequestClose","cb","handleOnExit","refExit","refClose","prevProps","prevState","popoverActions","updatePosition","trigger","placement","content","providedProps","triggerEl","cloneElement","actions","popoverEl","defaultFilterStyles","default","secondary","TableFilter","onFilterReset","onFilterUpdate","filterData","onFilterApply","filterGridColumns","col","useState","filters","setFilters","p","n","i","header","reset","resetLink","keys","filtersSelected","cellHeight","cols","spacing","RenderCheckBox","RenderMultiselect","RenderTextField","toString","RenderCustomField","RenderSelect","all","tile","gridListTile","fullWidth","htmlFor","labelFilterAll","handleDropdownChange","Input","filterValue","filterIndex","filterOptions","log","error","TextField","selected","indexOf","checkboxIcon","checkbox","ListItemText","xs","checkboxListTitle","container","FormControlLabel","checkboxFormControl","checkboxFormControlLabel","updated","splice","defaultViewColStyles","TableViewCol","handleColChange","onColumnUpdate","viewColumns","component","aria-label","titleAria","formGroup","formControl","defaultSearchStyles","TableSearch","handleTextChange","onSearch","onKeyDown","keyCode","onHide","searchText","appear","in","timeout","ref","rootRef","SearchIcon","searchIcon","search","searchField","searchPlaceholder","clearIcon","ClearIcon","defaultToolbarStyles","RESPONSIVE_FULL_WIDTH_NAME","TableToolbar","Boolean","searchOpen","handleCSVDownload","displayData","dataToDownload","columnsToDownload","useDisplayedRowsOnly","find","useDisplayedColumnsOnly","setActiveIcon","isSearchShown","iconName","iconActive","prevIconActive","setTableAction","onFilterDialogOpen","onFilterDialogClose","nextVal","showSearch","onSearchClose","getActiveIcon","styles","isActive","onSearchOpen","hideSearch","searchClose","searchButton","focus","handleSearch","searchTextUpdate","handleSearchIconClick","resetFilters","toggleViewColumn","downloadCsv","filterTable","fullWidthRoot","fullWidthLeft","customSearchRender","titleRoot","aria-hidden","titleText","fullWidthTitleText","fullWidthActions","disableFocusListener","DownloadIcon","ReactToPrint","PrintIcon","ViewColumnIcon","filterPaper","FilterIcon","customFilterDialogFooter","customToolbar","defaultToolbarSelectStyles","unit","TableToolbarSelect","handleCustomSelectedRows","TypeError","some","Error","onRowsDelete","customToolbarSelect","delete","iconButton","deleteAria","DeleteIcon","deleteIcon","getTextLabels","defaultTableStyles","TABLE_LOAD","TOOLBAR_ITEMS","hasToolbarItem","isUndefined","MUIDataTable","getDefaultOptions","handleOptionDeprecation","customFilterListRender","onTableChange","action","setTableInit","onTableInit","setHeadCellRef","headCellRefs","getTableContentRef","tableContent","current","buildColumns","sortDirectionSet","columnOptions","transformData","transformedData","empty","obj","split","hasSearchText","toSearch","toFind","caseSensitive","stack","needle","toLowerCase","updateDataCol","changedData","tableMeta","getTableMeta","funcResult","customBodyRender","isValidElement","prevFilterIndex","sortFilterList","comparator","getDisplayData","rowData","tableData","curState","onColumnViewChange","toggleSortColumn","newOrder","pos","orderLabel","getSortDirection","newState","sortedData","sortTable","onColumnSortChange","onChangeRowsPerPage","onChangePage","onSearchChange","onFilterChange","customUpdate","filterPos","selectRowDelete","selectedMap","cleanRows","setTableData","UPDATE","expandedRowsData","shouldCollapseExpandedRow","hasRemovedRow","removedRow","cIndex","onRowsExpand","curExpandedRows","prevSelectedRows","selectedRowsLen","isDeselect","arr","newRows","onRowsSelect","curSelectedRows","rowPos","shiftAdjacentMap","aRow","createRef","setHeadResizeable","initializeTable","updateOptions","INITIAL","resizableColumns","assignwith","objValue","srcValue","merge","mergeDefaultOptions","setTableOptions","defaultOptions","optState","acc","cur","_this4","validateOptions","status","callback","sortIndex","names","_this5","selectedRowsData","rowsSelected","rowsExpanded","dataForTableMeta","isFiltered","isSearchFound","displayRow","columnDisplay","columnValue","_this6","columnVal","filterVal","logic","every","searchable","customSearch","customSearchResult","computeDisplayRow","tableProps","classnames","tableRoot","dataSrc","customSort","sIndex","_this7","position","announceText","activeColumn","showToolbar","_this8","responsiveOption","paperClasses","maxHeight","responsiveClass","responsiveScroll","responsiveScrollMaxHeight","responsiveScrollFullHeight","paperResponsiveScrollFullHeightFullWidth","responsiveStackedFullWidth","tableClassNames","elevation","customFilterListOptions","render","f","update","fn","updateToolbarSelect","liveAnnounce","aria-live"],"mappings":"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"}